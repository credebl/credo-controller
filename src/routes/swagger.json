{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Record_string.unknown_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"RecordId": {
				"type": "string",
				"example": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e"
			},
			"ProofFormat": {
				"properties": {
					"formatKey": {
						"type": "string"
					},
					"proofFormats": {
						"properties": {
							"selectCredentialsForRequest": {
								"properties": {
									"output": {},
									"input": {}
								},
								"required": [
									"output",
									"input"
								],
								"type": "object"
							},
							"getCredentialsForRequest": {
								"properties": {
									"output": {},
									"input": {}
								},
								"required": [
									"output",
									"input"
								],
								"type": "object"
							},
							"acceptRequest": {},
							"createRequest": {},
							"acceptProposal": {},
							"createProposal": {}
						},
						"required": [
							"selectCredentialsForRequest",
							"getCredentialsForRequest",
							"acceptRequest",
							"createRequest",
							"acceptProposal",
							"createProposal"
						],
						"type": "object"
					},
					"formatData": {
						"properties": {
							"presentation": {},
							"request": {},
							"proposal": {}
						},
						"required": [
							"presentation",
							"request",
							"proposal"
						],
						"type": "object"
					}
				},
				"required": [
					"formatKey",
					"proofFormats",
					"formatData"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AutoAcceptProof": {
				"description": "Typing of the state for auto acceptance",
				"enum": [
					"always",
					"contentApproved",
					"never"
				],
				"type": "string"
			},
			"RequestProofProposalOptions": {
				"properties": {
					"connectionId": {
						"type": "string"
					},
					"proofFormats": {
						"properties": {
							"action": {
								"type": "string",
								"enum": [
									"createProposal"
								],
								"nullable": false
							},
							"formats": {
								"items": {
									"$ref": "#/components/schemas/ProofFormat"
								},
								"type": "array"
							}
						},
						"required": [
							"action",
							"formats"
						],
						"type": "object"
					},
					"goalCode": {
						"type": "string"
					},
					"parentThreadId": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"connectionId",
					"proofFormats"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AcceptProofProposal": {
				"properties": {
					"proofRecordId": {
						"type": "string"
					},
					"proofFormats": {
						"properties": {
							"action": {
								"type": "string",
								"enum": [
									"acceptProposal"
								],
								"nullable": false
							},
							"formats": {
								"items": {
									"$ref": "#/components/schemas/ProofFormat"
								},
								"type": "array"
							}
						},
						"required": [
							"action",
							"formats"
						],
						"type": "object"
					},
					"comment": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"goalCode": {
						"type": "string"
					},
					"willConfirm": {
						"type": "boolean"
					}
				},
				"required": [
					"proofRecordId",
					"proofFormats"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RequestProofOptions": {
				"properties": {
					"connectionId": {
						"type": "string"
					},
					"protocolVersion": {
						"type": "string"
					},
					"proofFormats": {},
					"comment": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"goalCode": {
						"type": "string"
					},
					"parentThreadId": {
						"type": "string"
					},
					"willConfirm": {
						"type": "boolean"
					}
				},
				"required": [
					"connectionId",
					"protocolVersion",
					"proofFormats",
					"comment",
					"autoAcceptProof"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateProofRequestOobOptions": {
				"properties": {
					"protocolVersion": {
						"type": "string"
					},
					"proofFormats": {},
					"goalCode": {
						"type": "string"
					},
					"parentThreadId": {
						"type": "string"
					},
					"willConfirm": {
						"type": "boolean"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"comment": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"recipientKey": {
						"type": "string"
					}
				},
				"required": [
					"protocolVersion",
					"proofFormats"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HandshakeProtocol": {
				"description": "Enum values should be sorted based on order of preference. Values will be\nincluded in this order when creating out of band invitations.",
				"enum": [
					"https://didcomm.org/didexchange/1.x",
					"https://didcomm.org/connections/1.x"
				],
				"type": "string"
			},
			"PlaintextMessage": {
				"properties": {
					"@type": {
						"type": "string"
					},
					"@id": {
						"type": "string"
					},
					"~thread": {
						"properties": {
							"pthid": {
								"type": "string"
							},
							"thid": {
								"type": "string"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"@type",
					"@id"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"AgentMessage": {
				"$ref": "#/components/schemas/PlaintextMessage"
			},
			"KeyType": {
				"enum": [
					"ed25519",
					"bls12381g1g2",
					"bls12381g1",
					"bls12381g2",
					"x25519",
					"p256",
					"p384",
					"p521",
					"k256"
				],
				"type": "string"
			},
			"Key": {
				"properties": {
					"publicKey": {
						"type": "string",
						"format": "byte"
					},
					"keyType": {
						"$ref": "#/components/schemas/KeyType"
					}
				},
				"required": [
					"publicKey",
					"keyType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Routing": {
				"properties": {
					"endpoints": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"recipientKey": {
						"$ref": "#/components/schemas/Key"
					},
					"routingKeys": {
						"items": {
							"$ref": "#/components/schemas/Key"
						},
						"type": "array"
					},
					"mediatorId": {
						"type": "string"
					}
				},
				"required": [
					"endpoints",
					"recipientKey",
					"routingKeys"
				],
				"type": "object",
				"additionalProperties": false
			},
			"JsonValue": {
				"anyOf": [
					{
						"type": "string"
					},
					{
						"type": "number",
						"format": "double"
					},
					{
						"type": "boolean"
					},
					{
						"$ref": "#/components/schemas/JsonObject"
					},
					{
						"$ref": "#/components/schemas/JsonArray"
					}
				],
				"nullable": true
			},
			"JsonObject": {
				"properties": {},
				"type": "object",
				"additionalProperties": {
					"$ref": "#/components/schemas/JsonValue"
				}
			},
			"JsonArray": {
				"items": {
					"$ref": "#/components/schemas/JsonValue"
				},
				"type": "array"
			},
			"Pick_JwsGeneralFormat.Exclude_keyofJwsGeneralFormat.payload__": {
				"properties": {
					"header": {
						"$ref": "#/components/schemas/Record_string.unknown_",
						"description": "unprotected header"
					},
					"signature": {
						"type": "string",
						"description": "Base64url encoded signature"
					},
					"protected": {
						"type": "string",
						"description": "Base64url encoded protected header"
					}
				},
				"required": [
					"header",
					"signature",
					"protected"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_JwsGeneralFormat.payload_": {
				"$ref": "#/components/schemas/Pick_JwsGeneralFormat.Exclude_keyofJwsGeneralFormat.payload__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"JwsDetachedFormat": {
				"$ref": "#/components/schemas/Omit_JwsGeneralFormat.payload_"
			},
			"JwsFlattenedDetachedFormat": {
				"properties": {
					"signatures": {
						"items": {
							"$ref": "#/components/schemas/JwsDetachedFormat"
						},
						"type": "array"
					}
				},
				"required": [
					"signatures"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AttachmentData": {
				"description": "A JSON object that gives access to the actual content of the attachment",
				"properties": {
					"base64": {
						"type": "string",
						"description": "Base64-encoded data, when representing arbitrary content inline instead of via links. Optional."
					},
					"json": {
						"$ref": "#/components/schemas/JsonValue",
						"description": "Directly embedded JSON data, when representing content inline instead of via links, and when the content is natively conveyable as JSON. Optional."
					},
					"links": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "A list of zero or more locations at which the content may be fetched. Optional."
					},
					"jws": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JwsDetachedFormat"
							},
							{
								"$ref": "#/components/schemas/JwsFlattenedDetachedFormat"
							}
						],
						"description": "A JSON Web Signature over the content of the attachment. Optional."
					},
					"sha256": {
						"type": "string",
						"description": "The hash of the content. Optional."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Attachment": {
				"description": "Represents DIDComm attachment\nhttps://github.com/hyperledger/aries-rfcs/blob/master/concepts/0017-attachments/README.md",
				"properties": {
					"id": {
						"type": "string"
					},
					"description": {
						"type": "string",
						"description": "An optional human-readable description of the content."
					},
					"filename": {
						"type": "string",
						"description": "A hint about the name that might be used if this attachment is persisted as a file. It is not required, and need not be unique. If this field is present and mime-type is not, the extension on the filename may be used to infer a MIME type."
					},
					"mimeType": {
						"type": "string",
						"description": "Describes the MIME type of the attached content. Optional but recommended."
					},
					"lastmodTime": {
						"type": "string",
						"format": "date-time",
						"description": "A hint about when the content in this attachment was last modified."
					},
					"byteCount": {
						"type": "number",
						"format": "double",
						"description": "Optional, and mostly relevant when content is included by reference instead of by value. Lets the receiver guess how expensive it will be, in time, bandwidth, and storage, to fully fetch the attachment."
					},
					"data": {
						"$ref": "#/components/schemas/AttachmentData"
					}
				},
				"required": [
					"id",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateInvitationOptions": {
				"properties": {
					"label": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"goalCode": {
						"type": "string"
					},
					"goal": {
						"type": "string"
					},
					"handshake": {
						"type": "boolean"
					},
					"handshakeProtocols": {
						"items": {
							"$ref": "#/components/schemas/HandshakeProtocol"
						},
						"type": "array"
					},
					"messages": {
						"items": {
							"$ref": "#/components/schemas/AgentMessage"
						},
						"type": "array"
					},
					"multiUseInvitation": {
						"type": "boolean"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					},
					"routing": {
						"$ref": "#/components/schemas/Routing"
					},
					"appendedAttachments": {
						"items": {
							"$ref": "#/components/schemas/Attachment"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_CreateLegacyInvitationConfig.Exclude_keyofCreateLegacyInvitationConfig.routing__": {
				"properties": {
					"label": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"multiUseInvitation": {
						"type": "boolean"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_CreateLegacyInvitationConfig.routing_": {
				"$ref": "#/components/schemas/Pick_CreateLegacyInvitationConfig.Exclude_keyofCreateLegacyInvitationConfig.routing__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"RecipientKeyOption": {
				"properties": {
					"recipientKey": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AgentMessageType": {
				"properties": {
					"@id": {
						"type": "string"
					},
					"@type": {
						"type": "string"
					}
				},
				"required": [
					"@id",
					"@type"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"OutOfBandDidCommService": {
				"properties": {
					"id": {
						"type": "string"
					},
					"serviceEndpoint": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"recipientKeys": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"routingKeys": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"accept": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"serviceEndpoint",
					"type",
					"recipientKeys"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OutOfBandInvitationSchema": {
				"properties": {
					"@id": {
						"type": "string"
					},
					"@type": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"goalCode": {
						"type": "string"
					},
					"goal": {
						"type": "string"
					},
					"accept": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"handshake_protocols": {
						"items": {
							"$ref": "#/components/schemas/HandshakeProtocol"
						},
						"type": "array"
					},
					"services": {
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/OutOfBandDidCommService"
								},
								{
									"type": "string"
								}
							]
						},
						"type": "array"
					},
					"imageUrl": {
						"type": "string"
					}
				},
				"required": [
					"@type",
					"label",
					"services"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_ReceiveOutOfBandInvitationConfig.Exclude_keyofReceiveOutOfBandInvitationConfig.routing__": {
				"properties": {
					"label": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					},
					"autoAcceptInvitation": {
						"type": "boolean"
					},
					"reuseConnection": {
						"type": "boolean"
					},
					"acceptInvitationTimeoutMs": {
						"type": "number",
						"format": "double"
					},
					"ourDid": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_ReceiveOutOfBandInvitationConfig.routing_": {
				"$ref": "#/components/schemas/Pick_ReceiveOutOfBandInvitationConfig.Exclude_keyofReceiveOutOfBandInvitationConfig.routing__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"ReceiveInvitationProps": {
				"properties": {
					"label": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					},
					"autoAcceptInvitation": {
						"type": "boolean"
					},
					"reuseConnection": {
						"type": "boolean"
					},
					"acceptInvitationTimeoutMs": {
						"type": "number",
						"format": "double"
					},
					"ourDid": {
						"type": "string"
					},
					"invitation": {
						"$ref": "#/components/schemas/OutOfBandInvitationSchema"
					}
				},
				"required": [
					"invitation"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ReceiveInvitationByUrlProps": {
				"properties": {
					"label": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					},
					"autoAcceptInvitation": {
						"type": "boolean"
					},
					"reuseConnection": {
						"type": "boolean"
					},
					"acceptInvitationTimeoutMs": {
						"type": "number",
						"format": "double"
					},
					"ourDid": {
						"type": "string"
					},
					"invitationUrl": {
						"type": "string"
					}
				},
				"required": [
					"invitationUrl"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AcceptInvitationConfig": {
				"properties": {
					"autoAcceptConnection": {
						"type": "boolean"
					},
					"reuseConnection": {
						"type": "boolean"
					},
					"label": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"mediatorId": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_TenantConfig.Exclude_keyofTenantConfig.walletConfig__": {
				"properties": {
					"label": {
						"type": "string"
					},
					"connectionImageUrl": {
						"type": "string"
					}
				},
				"required": [
					"label"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_TenantConfig.walletConfig_": {
				"$ref": "#/components/schemas/Pick_TenantConfig.Exclude_keyofTenantConfig.walletConfig__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateTenantOptions": {
				"properties": {
					"config": {
						"$ref": "#/components/schemas/Omit_TenantConfig.walletConfig_"
					},
					"seed": {
						"type": "string"
					},
					"method": {
						"type": "string"
					},
					"role": {
						"type": "string"
					},
					"endorserDid": {
						"type": "string"
					},
					"did": {
						"type": "string"
					}
				},
				"required": [
					"config"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.any_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"DidDocument": {
				"$ref": "#/components/schemas/Record_string.any_"
			},
			"DidCreate": {
				"properties": {
					"keyType": {
						"$ref": "#/components/schemas/KeyType"
					},
					"seed": {
						"type": "string"
					},
					"domain": {
						"type": "string"
					},
					"method": {
						"type": "string"
					},
					"network": {
						"type": "string"
					},
					"did": {
						"type": "string"
					},
					"role": {
						"type": "string"
					},
					"endorserDid": {
						"type": "string"
					},
					"didDocument": {
						"$ref": "#/components/schemas/DidDocument"
					},
					"privatekey": {
						"type": "string"
					},
					"endpoint": {
						"type": "string"
					}
				},
				"required": [
					"keyType",
					"method"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidNymTransaction": {
				"properties": {
					"did": {
						"type": "string"
					},
					"nymRequest": {
						"type": "string"
					}
				},
				"required": [
					"did",
					"nymRequest"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EndorserTransaction": {
				"properties": {
					"transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/Record_string.unknown_"
							}
						]
					},
					"endorserDid": {
						"type": "string"
					}
				},
				"required": [
					"transaction",
					"endorserDid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_CreateOutOfBandInvitationConfig.Exclude_keyofCreateOutOfBandInvitationConfig.routing-or-appendedAttachments-or-messages__": {
				"properties": {
					"label": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"multiUseInvitation": {
						"type": "boolean"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					},
					"goalCode": {
						"type": "string"
					},
					"goal": {
						"type": "string"
					},
					"handshake": {
						"type": "boolean"
					},
					"handshakeProtocols": {
						"items": {
							"$ref": "#/components/schemas/HandshakeProtocol"
						},
						"type": "array"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_CreateOutOfBandInvitationConfig.routing-or-appendedAttachments-or-messages_": {
				"$ref": "#/components/schemas/Pick_CreateOutOfBandInvitationConfig.Exclude_keyofCreateOutOfBandInvitationConfig.routing-or-appendedAttachments-or-messages__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"DidExchangeState": {
				"description": "Connection states as defined in RFC 0023.",
				"enum": [
					"start",
					"invitation-sent",
					"invitation-received",
					"request-sent",
					"request-received",
					"response-sent",
					"response-received",
					"abandoned",
					"completed"
				],
				"type": "string"
			},
			"Version": {
				"type": "string",
				"example": "1.0.0"
			},
			"WriteTransaction": {
				"properties": {
					"endorsedTransaction": {
						"type": "string"
					},
					"endorserDid": {
						"type": "string"
					},
					"schema": {
						"properties": {
							"attributes": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"version": {
								"$ref": "#/components/schemas/Version"
							},
							"name": {
								"type": "string"
							},
							"issuerId": {
								"type": "string"
							}
						},
						"required": [
							"attributes",
							"version",
							"name",
							"issuerId"
						],
						"type": "object"
					},
					"credentialDefinition": {
						"properties": {
							"type": {
								"type": "string"
							},
							"value": {},
							"tag": {
								"type": "string"
							},
							"issuerId": {
								"type": "string"
							},
							"schemaId": {
								"type": "string"
							}
						},
						"required": [
							"type",
							"value",
							"tag",
							"issuerId",
							"schemaId"
						],
						"type": "object"
					}
				},
				"required": [
					"endorsedTransaction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SchemaId": {
				"type": "string",
				"example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
			},
			"CredentialDefinitionId": {
				"type": "string",
				"example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
			},
			"AutoAcceptCredential": {
				"description": "Typing of the state for auto acceptance",
				"enum": [
					"always",
					"contentApproved",
					"never"
				],
				"type": "string"
			},
			"CreateOfferOptions": {
				"properties": {
					"protocolVersion": {
						"type": "string"
					},
					"connectionId": {
						"type": "string"
					},
					"credentialFormats": {},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"protocolVersion",
					"connectionId",
					"credentialFormats"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialPreviewAttributeOptions": {
				"properties": {
					"name": {
						"type": "string"
					},
					"mimeType": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LinkedAttachment": {
				"properties": {
					"attributeName": {
						"type": "string",
						"description": "The name that will be used to generate the linked credential"
					},
					"attachment": {
						"$ref": "#/components/schemas/Attachment",
						"description": "The attachment that needs to be linked to the credential"
					}
				},
				"required": [
					"attributeName",
					"attachment"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsOfferCredentialFormat": {
				"description": "This defines the module payload for calling CredentialsApi.offerCredential\nor CredentialsApi.negotiateProposal",
				"properties": {
					"credentialDefinitionId": {
						"type": "string"
					},
					"revocationRegistryDefinitionId": {
						"type": "string"
					},
					"revocationRegistryIndex": {
						"type": "number",
						"format": "double"
					},
					"attributes": {
						"items": {
							"$ref": "#/components/schemas/CredentialPreviewAttributeOptions"
						},
						"type": "array"
					},
					"linkedAttachments": {
						"items": {
							"$ref": "#/components/schemas/LinkedAttachment"
						},
						"type": "array"
					}
				},
				"required": [
					"credentialDefinitionId",
					"attributes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"W3cIssuerOptions": {
				"description": "TODO: check how to support arbitrary data in class",
				"properties": {
					"id": {
						"type": "string"
					}
				},
				"required": [
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SingleOrArray_JsonObject_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/JsonObject"
					},
					{
						"items": {
							"$ref": "#/components/schemas/JsonObject"
						},
						"type": "array"
					}
				]
			},
			"JsonCredential": {
				"properties": {
					"@context": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"$ref": "#/components/schemas/JsonObject"
							}
						]
					},
					"id": {
						"type": "string"
					},
					"type": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"issuer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/W3cIssuerOptions"
							}
						]
					},
					"issuanceDate": {
						"type": "string"
					},
					"expirationDate": {
						"type": "string"
					},
					"credentialSubject": {
						"$ref": "#/components/schemas/SingleOrArray_JsonObject_"
					}
				},
				"required": [
					"@context",
					"type",
					"issuer",
					"issuanceDate",
					"credentialSubject"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"JsonLdCredentialDetailFormat": {
				"description": "Format for creating a jsonld proposal, offer or request.",
				"properties": {
					"credential": {
						"$ref": "#/components/schemas/JsonCredential"
					},
					"options": {
						"properties": {
							"proofType": {
								"type": "string"
							},
							"proofPurpose": {
								"type": "string"
							}
						},
						"required": [
							"proofType",
							"proofPurpose"
						],
						"type": "object"
					}
				},
				"required": [
					"credential",
					"options"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatPayload_CredentialFormatType-Array.createOffer_": {
				"properties": {
					"indy": {
						"$ref": "#/components/schemas/AnonCredsOfferCredentialFormat"
					},
					"jsonld": {
						"$ref": "#/components/schemas/JsonLdCredentialDetailFormat"
					},
					"anoncreds": {
						"$ref": "#/components/schemas/AnonCredsOfferCredentialFormat"
					}
				},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"CreateOfferOobOptions": {
				"properties": {
					"protocolVersion": {
						"type": "string"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormatType-Array.createOffer_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					},
					"goalCode": {
						"type": "string"
					},
					"parentThreadId": {
						"type": "string"
					},
					"willConfirm": {
						"type": "boolean"
					},
					"label": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"recipientKey": {
						"type": "string"
					}
				},
				"required": [
					"protocolVersion",
					"credentialFormats"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatPayload_CredentialFormatsFromProtocols_CredentialProtocol-Array_.acceptOffer_": {
				"properties": {},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"AcceptCredentialOfferOptions": {
				"description": "Interface for CredentialsApi.acceptOffer. Will send a request\n\ncredentialFormats is optional because this is an accept method",
				"properties": {
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					},
					"credentialRecordId": {
						"type": "string"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormatsFromProtocols_CredentialProtocol-Array_.acceptOffer_"
					}
				},
				"required": [
					"credentialRecordId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialState": {
				"description": "Issue Credential states as defined in RFC 0036 and RFC 0453",
				"enum": [
					"proposal-sent",
					"proposal-received",
					"offer-sent",
					"offer-received",
					"declined",
					"request-sent",
					"request-received",
					"credential-issued",
					"credential-received",
					"done",
					"abandoned"
				],
				"type": "string"
			},
			"QuestionAnswerRole": {
				"enum": [
					"questioner",
					"responder"
				],
				"type": "string"
			},
			"QuestionAnswerState": {
				"description": "QuestionAnswer states inferred from RFC 0113.",
				"enum": [
					"question-sent",
					"question-received",
					"answer-received",
					"answer-sent"
				],
				"type": "string"
			},
			"ValidResponse": {
				"properties": {
					"text": {
						"type": "string"
					}
				},
				"required": [
					"text"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_response.string_": {
				"properties": {
					"response": {
						"type": "string"
					}
				},
				"required": [
					"response"
				],
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"DidResolutionMetadata": {
				"properties": {
					"contentType": {
						"type": "string"
					},
					"error": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "string",
								"enum": [
									"invalidDid",
									"notFound",
									"representationNotSupported",
									"unsupportedDidMethod"
								]
							}
						]
					},
					"message": {
						"type": "string"
					},
					"servedFromCache": {
						"type": "boolean"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DIDDocumentMetadata": {
				"description": "Represents metadata about the DID document resulting from a {@link Resolvable.resolve} operation.",
				"properties": {
					"created": {
						"type": "string"
					},
					"updated": {
						"type": "string"
					},
					"deactivated": {
						"type": "boolean"
					},
					"versionId": {
						"type": "string"
					},
					"nextUpdate": {
						"type": "string"
					},
					"nextVersionId": {
						"type": "string"
					},
					"equivalentId": {
						"type": "string"
					},
					"canonicalId": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Did": {
				"type": "string",
				"example": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL"
			},
			"W3cCredentialRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"ConnectionRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"ProposeCredentialOptions": {
				"properties": {
					"connectionRecord": {
						"$ref": "#/components/schemas/ConnectionRecord"
					},
					"credentialFormats": {
						"properties": {
							"indy": {
								"properties": {
									"attributes": {
										"items": {
											"properties": {
												"value": {
													"type": "string"
												},
												"name": {
													"type": "string"
												}
											},
											"required": [
												"value",
												"name"
											],
											"type": "object"
										},
										"type": "array"
									},
									"issuerDid": {
										"type": "string"
									},
									"credentialDefinitionId": {
										"type": "string"
									},
									"schemaVersion": {
										"type": "string"
									},
									"schemaName": {
										"type": "string"
									},
									"schemaId": {
										"type": "string"
									},
									"schemaIssuerDid": {
										"type": "string"
									}
								},
								"required": [
									"attributes",
									"issuerDid",
									"credentialDefinitionId",
									"schemaVersion",
									"schemaName",
									"schemaId",
									"schemaIssuerDid"
								],
								"type": "object"
							}
						},
						"required": [
							"indy"
						],
						"type": "object"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					},
					"connectionId": {
						"type": "string"
					}
				},
				"required": [
					"connectionRecord",
					"credentialFormats",
					"connectionId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatPayload_CredentialFormats.acceptProposal_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"AcceptCredentialProposalOptions": {
				"properties": {
					"credentialRecordId": {
						"type": "string"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormats.acceptProposal_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"credentialRecordId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatPayload_CredentialFormats.acceptOffer_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"CredentialOfferOptions": {
				"properties": {
					"credentialRecordId": {
						"type": "string"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormats.acceptOffer_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"credentialRecordId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialExchangeRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"CredentialFormatPayload_CredentialFormats.acceptRequest_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"AcceptCredentialRequestOptions": {
				"properties": {
					"credentialRecord": {
						"$ref": "#/components/schemas/CredentialExchangeRecord"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormats.acceptRequest_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"credentialRecord"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AcceptCredential": {
				"properties": {
					"credentialRecord": {
						"$ref": "#/components/schemas/CredentialExchangeRecord"
					}
				},
				"required": [
					"credentialRecord"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BasicMessageRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"Record_content.string_": {
				"properties": {
					"content": {
						"type": "string"
					}
				},
				"required": [
					"content"
				],
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"AgentInfo": {
				"properties": {
					"label": {
						"type": "string"
					},
					"endpoints": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"isInitialized": {
						"type": "boolean"
					},
					"publicDid": {}
				},
				"required": [
					"label",
					"endpoints",
					"isInitialized",
					"publicDid"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"apiKey": {
				"type": "apiKey",
				"name": "Authorization",
				"in": "header"
			}
		}
	},
	"info": {
		"title": "@aries-framework/rest",
		"version": "0.9.4",
		"description": "Rest endpoint wrapper for using your agent over HTTP",
		"license": {
			"name": "Apache-2.0"
		},
		"contact": {}
	},
	"paths": {
		"/proofs": {
			"get": {
				"operationId": "GetAllProofs",
				"responses": {
					"200": {
						"description": "ProofRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Record_string.unknown_"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": [
											{
												"metadata": {},
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
												"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
												"protocolVersion": "v1"
											}
										]
									}
								}
							}
						}
					}
				},
				"description": "Retrieve all proof records",
				"tags": [
					"Proofs"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "threadId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/proofs/{proofRecordId}": {
			"get": {
				"operationId": "GetProofById",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieve proof record by proof record id",
				"tags": [
					"Proofs"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/proofs/propose-proof": {
			"post": {
				"operationId": "ProposeProof",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Initiate a new presentation exchange as prover by sending a presentation proposal request\nto the connection with the specified connection id.",
				"tags": [
					"Proofs"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RequestProofProposalOptions"
							}
						}
					}
				}
			}
		},
		"/proofs/{proofRecordId}/accept-proposal": {
			"post": {
				"operationId": "AcceptProposal",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a presentation proposal as verifier by sending an accept proposal message\nto the connection associated with the proof record.",
				"tags": [
					"Proofs"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptProofProposal"
							}
						}
					}
				}
			}
		},
		"/proofs/request-proof": {
			"post": {
				"operationId": "RequestProof",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Proofs"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RequestProofOptions"
							}
						}
					}
				}
			}
		},
		"/proofs/create-request-oob": {
			"post": {
				"operationId": "CreateRequest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Proofs"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateProofRequestOobOptions"
							}
						}
					}
				}
			}
		},
		"/proofs/{proofRecordId}/accept-request": {
			"post": {
				"operationId": "AcceptRequest",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a presentation request as prover by sending an accept request message\nto the connection associated with the proof record.",
				"tags": [
					"Proofs"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"comment": {
										"type": "string"
									},
									"filterByNonRevocationRequirements": {
										"type": "boolean"
									},
									"filterByPresentationPreview": {
										"type": "boolean"
									}
								},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/proofs/{proofRecordId}/accept-presentation": {
			"post": {
				"operationId": "AcceptPresentation",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a presentation as prover by sending an accept presentation message\nto the connection associated with the proof record.",
				"tags": [
					"Proofs"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/proofs/{proofRecordId}/form-data": {
			"get": {
				"operationId": "ProofFormData",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Proofs"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/polygon/create-keys": {
			"post": {
				"operationId": "CreateKeyPair",
				"responses": {
					"200": {
						"description": "Secp256k1KeyPair",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"address": {
											"type": "string"
										},
										"publicKeyBase58": {
											"type": "string"
										},
										"privateKey": {
											"type": "string"
										}
									},
									"required": [
										"address",
										"publicKeyBase58",
										"privateKey"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Create Secp256k1 key pair for polygon DID",
				"tags": [
					"Polygon"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": []
			}
		},
		"/polygon/create-schema": {
			"post": {
				"operationId": "CreateSchema",
				"responses": {
					"200": {
						"description": "Schema JSON",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Create polygon based W3C schema",
				"tags": [
					"Polygon"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"schema": {
										"properties": {},
										"additionalProperties": {},
										"type": "object"
									},
									"schemaName": {
										"type": "string"
									},
									"did": {
										"type": "string"
									}
								},
								"required": [
									"schema",
									"schemaName",
									"did"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/polygon/estimate-transaction": {
			"post": {
				"operationId": "EstimateTransaction",
				"responses": {
					"200": {
						"description": "Transaction Object",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Estimate transaction",
				"tags": [
					"Polygon"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"transaction": {},
									"operation": {}
								},
								"required": [
									"transaction",
									"operation"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/polygon/{did}/{schemaId}": {
			"get": {
				"operationId": "GetSchemaById",
				"responses": {
					"200": {
						"description": "Schema Object",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Fetch schema details",
				"tags": [
					"Polygon"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "did",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "schemaId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/oob": {
			"get": {
				"operationId": "GetAllOutOfBandRecords",
				"responses": {
					"200": {
						"description": "OutOfBandRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Record_string.unknown_"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": [
											{
												"_tags": {
													"invitationId": "1cbd22e4-1906-41e9-8807-83d84437f978",
													"state": "await-response",
													"role": "sender",
													"recipientKeyFingerprints": [
														"z6MktUCPZjfRJXD4GMcYuXiqX2qZ8vBw6UAYpDFiHEUfwuLj"
													]
												},
												"outOfBandInvitation": {
													"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"metadata": {},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"reusable": false
											}
										]
									}
								}
							}
						}
					}
				},
				"description": "Retrieve all out of band records",
				"tags": [
					"Out Of Band"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"description": "invitation identifier",
						"in": "query",
						"name": "invitationId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/oob/{outOfBandId}": {
			"get": {
				"operationId": "GetOutOfBandRecordById",
				"responses": {
					"200": {
						"description": "OutOfBandRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"invitationId": "1cbd22e4-1906-41e9-8807-83d84437f978",
												"state": "await-response",
												"role": "sender",
												"recipientKeyFingerprints": [
													"z6MktUCPZjfRJXD4GMcYuXiqX2qZ8vBw6UAYpDFiHEUfwuLj"
												]
											},
											"outOfBandInvitation": {
												"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
												"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
												"label": "Aries Test Agent",
												"accept": [
													"didcomm/aip1",
													"didcomm/aip2;env=rfc19"
												],
												"handshake_protocols": [
													"https://didcomm.org/didexchange/1.0",
													"https://didcomm.org/connections/1.0"
												],
												"services": [
													{
														"id": "#inline-0",
														"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
														"type": "did-communication",
														"recipientKeys": [
															"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
														],
														"routingKeys": []
													}
												]
											},
											"metadata": {},
											"id": "42a95528-0e30-4f86-a462-0efb02178b53",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"reusable": false
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieve an out of band record by id",
				"tags": [
					"Out Of Band"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "outOfBandId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteOutOfBandRecord",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes an out of band record from the repository.",
				"tags": [
					"Out Of Band"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"description": "Record identifier",
						"in": "path",
						"name": "outOfBandId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/oob/create-invitation": {
			"post": {
				"operationId": "CreateInvitation",
				"responses": {
					"200": {
						"description": "Out of band record",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"invitationUrl": "string",
											"invitation": {
												"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
												"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
												"label": "Aries Test Agent",
												"accept": [
													"didcomm/aip1",
													"didcomm/aip2;env=rfc19"
												],
												"handshake_protocols": [
													"https://didcomm.org/didexchange/1.0",
													"https://didcomm.org/connections/1.0"
												],
												"services": [
													{
														"id": "#inline-0",
														"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
														"type": "did-communication",
														"recipientKeys": [
															"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
														],
														"routingKeys": []
													}
												]
											},
											"outOfBandRecord": {
												"_tags": {
													"invitationId": "1cbd22e4-1906-41e9-8807-83d84437f978",
													"state": "await-response",
													"role": "sender",
													"recipientKeyFingerprints": [
														"z6MktUCPZjfRJXD4GMcYuXiqX2qZ8vBw6UAYpDFiHEUfwuLj"
													]
												},
												"outOfBandInvitation": {
													"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"metadata": {},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"reusable": false
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Creates an outbound out-of-band record containing out-of-band invitation message defined in\nAries RFC 0434: Out-of-Band Protocol 1.1.",
				"tags": [
					"Out Of Band"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "configuration of how out-of-band invitation should be created",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateInvitationOptions",
								"description": "configuration of how out-of-band invitation should be created"
							}
						}
					}
				}
			}
		},
		"/oob/create-legacy-invitation": {
			"post": {
				"operationId": "CreateLegacyInvitation",
				"responses": {
					"200": {
						"description": "out-of-band record and invitation",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"invitation": {
												"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
												"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
												"label": "Aries Test Agent",
												"accept": [
													"didcomm/aip1",
													"didcomm/aip2;env=rfc19"
												],
												"handshake_protocols": [
													"https://didcomm.org/didexchange/1.0",
													"https://didcomm.org/connections/1.0"
												],
												"services": [
													{
														"id": "#inline-0",
														"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
														"type": "did-communication",
														"recipientKeys": [
															"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
														],
														"routingKeys": []
													}
												]
											},
											"outOfBandRecord": {
												"_tags": {
													"invitationId": "1cbd22e4-1906-41e9-8807-83d84437f978",
													"state": "await-response",
													"role": "sender",
													"recipientKeyFingerprints": [
														"z6MktUCPZjfRJXD4GMcYuXiqX2qZ8vBw6UAYpDFiHEUfwuLj"
													]
												},
												"outOfBandInvitation": {
													"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"metadata": {},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"reusable": false
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Creates an outbound out-of-band record in the same way how `createInvitation` method does it,\nbut it also converts out-of-band invitation message to an \"legacy\" invitation message defined\nin RFC 0160: Connection Protocol and returns it together with out-of-band record.",
				"tags": [
					"Out Of Band"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "configuration of how a invitation should be created",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"$ref": "#/components/schemas/Omit_CreateLegacyInvitationConfig.routing_"
									},
									{
										"$ref": "#/components/schemas/RecipientKeyOption"
									}
								],
								"description": "configuration of how a invitation should be created"
							}
						}
					}
				}
			}
		},
		"/oob/create-legacy-connectionless-invitation": {
			"post": {
				"operationId": "CreateLegacyConnectionlessInvitation",
				"responses": {
					"200": {
						"description": "a message and a invitationUrl",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"message": {
												"@id": "eac4ff4e-b4fb-4c1d-aef3-b29c89d1cc00",
												"@type": "https://didcomm.org/connections/1.0/invitation"
											},
											"invitationUrl": "http://example.com/invitation_url"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Creates a new connectionless legacy invitation.",
				"tags": [
					"Out Of Band"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "configuration of how a connection invitation should be created",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"domain": {
										"type": "string"
									},
									"message": {
										"$ref": "#/components/schemas/AgentMessageType"
									},
									"recordId": {
										"type": "string"
									}
								},
								"required": [
									"domain",
									"message",
									"recordId"
								],
								"type": "object",
								"description": "configuration of how a connection invitation should be created"
							}
						}
					}
				}
			}
		},
		"/oob/receive-invitation": {
			"post": {
				"operationId": "ReceiveInvitation",
				"responses": {
					"200": {
						"description": "out-of-band record and connection record if one has been created.",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"outOfBandRecord": {
												"_tags": {
													"invitationId": "1cbd22e4-1906-41e9-8807-83d84437f978",
													"state": "await-response",
													"role": "sender",
													"recipientKeyFingerprints": [
														"z6MktUCPZjfRJXD4GMcYuXiqX2qZ8vBw6UAYpDFiHEUfwuLj"
													]
												},
												"outOfBandInvitation": {
													"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"metadata": {},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"reusable": false
											},
											"connectionRecord": {
												"_tags": {
													"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
													"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
													"invitationKey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz",
													"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d",
													"verkey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz"
												},
												"metadata": {},
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Creates inbound out-of-band record and assigns out-of-band invitation message to it if the\nmessage is valid.",
				"tags": [
					"Out Of Band"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ReceiveInvitationProps"
							}
						}
					}
				}
			}
		},
		"/oob/receive-invitation-url": {
			"post": {
				"operationId": "ReceiveInvitationFromUrl",
				"responses": {
					"200": {
						"description": "out-of-band record and connection record if one has been created.",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"outOfBandRecord": {
												"_tags": {
													"invitationId": "1cbd22e4-1906-41e9-8807-83d84437f978",
													"state": "await-response",
													"role": "sender",
													"recipientKeyFingerprints": [
														"z6MktUCPZjfRJXD4GMcYuXiqX2qZ8vBw6UAYpDFiHEUfwuLj"
													]
												},
												"outOfBandInvitation": {
													"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"metadata": {},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"reusable": false
											},
											"connectionRecord": {
												"_tags": {
													"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
													"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
													"invitationKey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz",
													"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d",
													"verkey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz"
												},
												"metadata": {},
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Creates inbound out-of-band record and assigns out-of-band invitation message to it if the\nmessage is valid.",
				"tags": [
					"Out Of Band"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ReceiveInvitationByUrlProps"
							}
						}
					}
				}
			}
		},
		"/oob/{outOfBandId}/accept-invitation": {
			"post": {
				"operationId": "AcceptInvitation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"outOfBandRecord": {
												"_tags": {
													"invitationId": "1cbd22e4-1906-41e9-8807-83d84437f978",
													"state": "await-response",
													"role": "sender",
													"recipientKeyFingerprints": [
														"z6MktUCPZjfRJXD4GMcYuXiqX2qZ8vBw6UAYpDFiHEUfwuLj"
													]
												},
												"outOfBandInvitation": {
													"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"metadata": {},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"reusable": false
											},
											"connectionRecord": {
												"_tags": {
													"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
													"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
													"invitationKey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz",
													"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d",
													"verkey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz"
												},
												"metadata": {},
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
											}
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a connection invitation as invitee (by sending a connection request message) for the connection with the specified connection id.\nThis is not needed when auto accepting of connections is enabled.",
				"tags": [
					"Out Of Band"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "outOfBandId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptInvitationConfig"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/create-tenant": {
			"post": {
				"operationId": "CreateTenant",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTenantOptions"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/create-did/{tenantId}": {
			"post": {
				"operationId": "CreateDid",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCreate"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/dids/{tenantId}": {
			"get": {
				"operationId": "GetDids",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multi-tenancy/transactions/set-endorser-role/{tenantId}": {
			"post": {
				"operationId": "DidNymTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidNymTransaction"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/transactions/endorse/{tenantId}": {
			"post": {
				"operationId": "EndorserTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EndorserTransaction"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/connections/{connectionId}/{tenantId}": {
			"get": {
				"operationId": "GetConnectionById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"invitationKey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d",
												"verkey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz"
											},
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
											"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
											"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/multi-tenancy/create-invitation/{tenantId}": {
			"post": {
				"operationId": "CreateInvitation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_CreateOutOfBandInvitationConfig.routing-or-appendedAttachments-or-messages_"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/create-legacy-invitation/{tenantId}": {
			"post": {
				"operationId": "CreateLegacyInvitation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"$ref": "#/components/schemas/Omit_CreateOutOfBandInvitationConfig.routing-or-appendedAttachments-or-messages_"
									},
									{
										"$ref": "#/components/schemas/RecipientKeyOption"
									}
								]
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/receive-invitation/{tenantId}": {
			"post": {
				"operationId": "ReceiveInvitation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ReceiveInvitationProps"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/receive-invitation-url/{tenantId}": {
			"post": {
				"operationId": "ReceiveInvitationFromUrl",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ReceiveInvitationByUrlProps"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/oob/{invitationId}/{tenantId}": {
			"get": {
				"operationId": "GetAllOutOfBandRecords",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "invitationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multi-tenancy/connections/{tenantId}": {
			"get": {
				"operationId": "GetAllConnections",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "outOfBandId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "alias",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/DidExchangeState"
						}
					},
					{
						"in": "query",
						"name": "myDid",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "theirDid",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "theirLabel",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multi-tenancy/url/{tenantId}/{invitationId}": {
			"get": {
				"operationId": "GetInvitation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "invitationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multi-tenancy/schema/{tenantId}": {
			"post": {
				"operationId": "CreateSchema",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"endorserDid": {
										"type": "string"
									},
									"endorse": {
										"type": "boolean"
									},
									"attributes": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"version": {
										"$ref": "#/components/schemas/Version"
									},
									"name": {
										"type": "string"
									},
									"issuerId": {
										"type": "string"
									}
								},
								"required": [
									"attributes",
									"version",
									"name",
									"issuerId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/polygon-wc3/schema/{tenantId}": {
			"post": {
				"operationId": "CreatePolygonW3CSchema",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"schema": {
										"properties": {},
										"additionalProperties": {},
										"type": "object"
									},
									"schemaName": {
										"type": "string"
									},
									"did": {
										"type": "string"
									}
								},
								"required": [
									"schema",
									"schemaName",
									"did"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/polygon-wc3/schema/{did}/{schemaId}/{tenantId}": {
			"get": {
				"operationId": "GetPolygonW3CSchemaById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "did",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "schemaId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multi-tenancy/transactions/write/{tenantId}": {
			"post": {
				"operationId": "WriteSchemaAndCredDefOnLedger",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/WriteTransaction"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/schema/{schemaId}/{tenantId}": {
			"get": {
				"operationId": "GetSchemaById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "schemaId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/SchemaId"
						}
					},
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multi-tenancy/credential-definition/{tenantId}": {
			"post": {
				"operationId": "CreateCredentialDefinition",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"endorserDid": {
										"type": "string"
									},
									"endorse": {
										"type": "boolean"
									},
									"tag": {
										"type": "string"
									},
									"schemaId": {
										"type": "string"
									},
									"issuerId": {
										"type": "string"
									}
								},
								"required": [
									"tag",
									"schemaId",
									"issuerId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/credential-definition/{credentialDefinitionId}/{tenantId}": {
			"get": {
				"operationId": "GetCredentialDefinitionById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "credentialDefinitionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/CredentialDefinitionId"
						}
					},
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multi-tenancy/credentials/create-offer/{tenantId}": {
			"post": {
				"operationId": "CreateOffer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOfferOptions"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/credentials/create-offer-oob/{tenantId}": {
			"post": {
				"operationId": "CreateOfferOob",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOfferOobOptions"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/credentials/accept-offer/{tenantId}": {
			"post": {
				"operationId": "AcceptOffer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptCredentialOfferOptions"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/credentials/{credentialRecordId}/{tenantId}": {
			"get": {
				"operationId": "GetCredentialById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "credentialRecordId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					},
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multi-tenancy/credentials/{tenantId}": {
			"get": {
				"operationId": "GetAllCredentials",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "threadId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "connectionId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/CredentialState"
						}
					}
				]
			}
		},
		"/multi-tenancy/proofs/{tenantId}": {
			"get": {
				"operationId": "GetAllProofs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "threadId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multi-tenancy/form-data/{tenantId}/{proofRecordId}": {
			"get": {
				"operationId": "ProofFormData",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multi-tenancy/proofs/request-proof/{tenantId}": {
			"post": {
				"operationId": "RequestProof",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RequestProofOptions"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/proofs/create-request-oob/{tenantId}": {
			"post": {
				"operationId": "CreateRequest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateProofRequestOobOptions"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/proofs/{proofRecordId}/accept-request/{tenantId}": {
			"post": {
				"operationId": "AcceptRequest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"comment": {
										"type": "string"
									},
									"filterByNonRevocationRequirements": {
										"type": "boolean"
									},
									"filterByPresentationPreview": {
										"type": "boolean"
									}
								},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/proofs/{proofRecordId}/accept-presentation/{tenantId}": {
			"post": {
				"operationId": "AcceptPresentation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multi-tenancy/proofs/{proofRecordId}/{tenantId}": {
			"get": {
				"operationId": "GetProofById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/multi-tenancy/{tenantId}": {
			"delete": {
				"operationId": "DeleteTenantById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multi-tenancy/did/web/{tenantId}": {
			"post": {
				"operationId": "CreateDidWeb",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCreate"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/did/key{tenantId}": {
			"post": {
				"operationId": "CreateDidKey",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCreate"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/question-answer/{tenantId}": {
			"get": {
				"operationId": "GetQuestionAnswerRecords",
				"responses": {
					"200": {
						"description": "QuestionAnswerRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Record_string.unknown_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieve question and answer records by query",
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"description": "Tenant identifier",
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Connection identifier",
						"in": "query",
						"name": "connectionId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Role of the question",
						"in": "query",
						"name": "role",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/QuestionAnswerRole"
						}
					},
					{
						"description": "State of the question",
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/QuestionAnswerState"
						}
					},
					{
						"description": "Thread identifier",
						"in": "query",
						"name": "threadId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multi-tenancy/question-answer/question/{connectionId}/{tenantId}": {
			"post": {
				"operationId": "SendQuestion",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Send a question to a connection",
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					},
					{
						"description": "Tenant identifier",
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"detail": {
										"type": "string"
									},
									"validResponses": {
										"items": {
											"$ref": "#/components/schemas/ValidResponse"
										},
										"type": "array"
									},
									"question": {
										"type": "string"
									}
								},
								"required": [
									"validResponses",
									"question"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/question-answer/answer/{id}/{tenantId}": {
			"post": {
				"operationId": "SendAnswer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Send a answer to question",
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"description": "Question Answer Record identifier",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					},
					{
						"description": "Tenant identifier",
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Record_response.string_"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/question-answer/{id}/{tenantId}": {
			"get": {
				"operationId": "GetQuestionAnswerRecordById",
				"responses": {
					"200": {
						"description": "ConnectionRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieve question answer record by id",
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"description": "Question Answer Record identifier",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					},
					{
						"description": "Tenant identifier",
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/transactions/endorse": {
			"post": {
				"operationId": "EndorserTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"EndorserTransaction"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EndorserTransaction"
							}
						}
					}
				}
			}
		},
		"/transactions/set-endorser-role": {
			"post": {
				"operationId": "DidNymTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"EndorserTransaction"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidNymTransaction"
							}
						}
					}
				}
			}
		},
		"/transactions/write": {
			"post": {
				"operationId": "WriteSchemaAndCredDefOnLedger",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"EndorserTransaction"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/WriteTransaction"
							}
						}
					}
				}
			}
		},
		"/dids/{did}": {
			"get": {
				"operationId": "GetDidRecordByDid",
				"responses": {
					"200": {
						"description": "DidResolutionResult",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"importDid": {}
											},
											"required": [
												"importDid"
											],
											"type": "object"
										},
										{
											"properties": {
												"importDid": {},
												"didDocumentMetadata": {
													"$ref": "#/components/schemas/DIDDocumentMetadata"
												},
												"didResolutionMetadata": {
													"$ref": "#/components/schemas/DidResolutionMetadata"
												},
												"didDocument": {
													"$ref": "#/components/schemas/Record_string.any_"
												}
											},
											"required": [
												"didDocumentMetadata",
												"didResolutionMetadata",
												"didDocument"
											],
											"type": "object"
										}
									]
								},
								"examples": {
									"Example 1": {
										"value": {
											"didDocument": {
												"@context": [
													"https://w3id.org/did/v1",
													"https://w3id.org/security/suites/ed25519-2018/v1",
													"https://w3id.org/security/suites/x25519-2019/v1"
												],
												"id": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL",
												"verificationMethod": [
													{
														"id": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL",
														"type": "Ed25519VerificationKey2018",
														"controller": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL",
														"publicKeyBase58": "6fioC1zcDPyPEL19pXRS2E4iJ46zH7xP6uSgAaPdwDrx"
													}
												],
												"authentication": [
													"did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL"
												],
												"assertionMethod": [
													"did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL"
												],
												"capabilityInvocation": [
													"did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL"
												],
												"capabilityDelegation": [
													"did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL"
												],
												"keyAgreement": [
													{
														"id": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6LSrdqo4M24WRDJj1h2hXxgtDTyzjjKCiyapYVgrhwZAySn",
														"type": "X25519KeyAgreementKey2019",
														"controller": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL",
														"publicKeyBase58": "FxfdY3DCQxVZddKGAtSjZdFW9bCCW7oRwZn1NFJ2Tbg2"
													}
												]
											},
											"didDocumentMetadata": {},
											"didResolutionMetadata": {
												"contentType": "application/did+ld+json"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Resolves did and returns did resolution result",
				"tags": [
					"Dids"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"description": "Decentralized Identifier",
						"in": "path",
						"name": "did",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Did"
						}
					}
				]
			}
		},
		"/dids/write": {
			"post": {
				"operationId": "WriteDid",
				"responses": {
					"200": {
						"description": "DidResolutionResult",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Did nym registration",
				"tags": [
					"Dids"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCreate"
							}
						}
					}
				}
			}
		},
		"/dids": {
			"get": {
				"operationId": "GetDids",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Dids"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": []
			}
		},
		"/schemas/{schemaId}": {
			"get": {
				"operationId": "GetSchemaById",
				"responses": {
					"200": {
						"description": "Schema",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"ver": "1.0",
											"id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
											"name": "schema",
											"version": "1.0",
											"attrNames": [
												"string"
											],
											"seqNo": 351936
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieve schema by schema id",
				"tags": [
					"Schemas"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "schemaId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/SchemaId"
						}
					}
				]
			}
		},
		"/schemas": {
			"post": {
				"operationId": "CreateSchema",
				"responses": {
					"200": {
						"description": "schema",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"ver": "1.0",
											"id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
											"name": "schema",
											"version": "1.0",
											"attrNames": [
												"string"
											],
											"seqNo": 351936
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Creates a new schema and registers schema on ledger",
				"tags": [
					"Schemas"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"endorserDid": {
										"type": "string"
									},
									"endorse": {
										"type": "boolean"
									},
									"attributes": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"version": {
										"$ref": "#/components/schemas/Version"
									},
									"name": {
										"type": "string"
									},
									"issuerId": {
										"type": "string"
									}
								},
								"required": [
									"attributes",
									"version",
									"name",
									"issuerId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/credential-definitions/{credentialDefinitionId}": {
			"get": {
				"operationId": "GetCredentialDefinitionById",
				"responses": {
					"200": {
						"description": "CredDef",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"ver": "1.0",
											"id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
											"schemaId": "351936",
											"type": "CL",
											"tag": "definition",
											"value": {
												"primary": {
													"n": "string",
													"s": "string",
													"r": {
														"master_secret": "string",
														"string": "string"
													},
													"rctxt": "string",
													"z": "string"
												},
												"revocation": {
													"g": "1 string",
													"g_dash": "string",
													"h": "string",
													"h0": "string",
													"h1": "string",
													"h2": "string",
													"htilde": "string",
													"h_cap": "string",
													"u": "string",
													"pk": "string",
													"y": "string"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieve credential definition by credential definition id",
				"tags": [
					"Credential Definitions"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "credentialDefinitionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/CredentialDefinitionId"
						}
					}
				]
			}
		},
		"/credential-definitions": {
			"post": {
				"operationId": "CreateCredentialDefinition",
				"responses": {
					"200": {
						"description": "CredDef",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"ver": "1.0",
											"id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
											"schemaId": "351936",
											"type": "CL",
											"tag": "definition",
											"value": {
												"primary": {
													"n": "string",
													"s": "string",
													"r": {
														"master_secret": "string",
														"string": "string"
													},
													"rctxt": "string",
													"z": "string"
												},
												"revocation": {
													"g": "1 string",
													"g_dash": "string",
													"h": "string",
													"h0": "string",
													"h1": "string",
													"h2": "string",
													"htilde": "string",
													"h_cap": "string",
													"u": "string",
													"pk": "string",
													"y": "string"
												}
											}
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Creates a new credential definition.",
				"tags": [
					"Credential Definitions"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"endorserDid": {
										"type": "string"
									},
									"endorse": {
										"type": "boolean"
									},
									"tag": {
										"type": "string"
									},
									"schemaId": {
										"$ref": "#/components/schemas/SchemaId"
									},
									"issuerId": {
										"type": "string"
									}
								},
								"required": [
									"tag",
									"schemaId",
									"issuerId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/credentials": {
			"get": {
				"operationId": "GetAllCredentials",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Record_string.unknown_"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": [
											{
												"_tags": {
													"state": "offer-sent",
													"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
													"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b"
												},
												"metadata": {
													"_internal/indyCredential": {
														"credentialDefinitionId": "q7ATwTYbQDgiigVijUAej:3:CL:318187:latest",
														"schemaId": "q7ATwTYbQDgiigVijUAej:2:Employee Badge:1.0"
													}
												},
												"credentials": [],
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"credentialAttributes": [],
												"protocolVersion": "v1"
											}
										]
									}
								}
							}
						}
					}
				},
				"description": "Retrieve all credential exchange records",
				"tags": [
					"Credentials"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "threadId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "connectionId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/CredentialState"
						}
					}
				]
			}
		},
		"/credentials/w3c": {
			"get": {
				"operationId": "GetAllW3c",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/W3cCredentialRecord"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Credentials"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": []
			}
		},
		"/credentials/w3c/{id}": {
			"get": {
				"operationId": "GetW3cById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/W3cCredentialRecord"
								}
							}
						}
					}
				},
				"tags": [
					"Credentials"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/credentials/{credentialRecordId}": {
			"get": {
				"operationId": "GetCredentialById",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"state": "offer-sent",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b"
											},
											"metadata": {
												"_internal/indyCredential": {
													"credentialDefinitionId": "q7ATwTYbQDgiigVijUAej:3:CL:318187:latest",
													"schemaId": "q7ATwTYbQDgiigVijUAej:2:Employee Badge:1.0"
												}
											},
											"credentials": [],
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieve credential exchange record by credential record id",
				"tags": [
					"Credentials"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "credentialRecordId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/credentials/propose-credential": {
			"post": {
				"operationId": "ProposeCredential",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"state": "offer-sent",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b"
											},
											"metadata": {
												"_internal/indyCredential": {
													"credentialDefinitionId": "q7ATwTYbQDgiigVijUAej:3:CL:318187:latest",
													"schemaId": "q7ATwTYbQDgiigVijUAej:2:Employee Badge:1.0"
												}
											},
											"credentials": [],
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Initiate a new credential exchange as holder by sending a propose credential message\nto the connection with a specified connection id.",
				"tags": [
					"Credentials"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProposeCredentialOptions"
							}
						}
					}
				}
			}
		},
		"/credentials/accept-proposal": {
			"post": {
				"operationId": "AcceptProposal",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"state": "offer-sent",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b"
											},
											"metadata": {
												"_internal/indyCredential": {
													"credentialDefinitionId": "q7ATwTYbQDgiigVijUAej:3:CL:318187:latest",
													"schemaId": "q7ATwTYbQDgiigVijUAej:2:Employee Badge:1.0"
												}
											},
											"credentials": [],
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a credential proposal as issuer by sending an accept proposal message\nto the connection associated with the credential exchange record.",
				"tags": [
					"Credentials"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptCredentialProposalOptions"
							}
						}
					}
				}
			}
		},
		"/credentials/create-offer": {
			"post": {
				"operationId": "CreateOffer",
				"responses": {
					"200": {
						"description": "AgentMessage, CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"state": "offer-sent",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b"
											},
											"metadata": {
												"_internal/indyCredential": {
													"credentialDefinitionId": "q7ATwTYbQDgiigVijUAej:3:CL:318187:latest",
													"schemaId": "q7ATwTYbQDgiigVijUAej:2:Employee Badge:1.0"
												}
											},
											"credentials": [],
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Initiate a new credential exchange as issuer by creating a credential offer\nwithout specifying a connection id",
				"tags": [
					"Credentials"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOfferOptions"
							}
						}
					}
				}
			}
		},
		"/credentials/create-offer-oob": {
			"post": {
				"operationId": "CreateOfferOob",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Credentials"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOfferOobOptions"
							}
						}
					}
				}
			}
		},
		"/credentials/accept-offer": {
			"post": {
				"operationId": "AcceptOffer",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"state": "offer-sent",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b"
											},
											"metadata": {
												"_internal/indyCredential": {
													"credentialDefinitionId": "q7ATwTYbQDgiigVijUAej:3:CL:318187:latest",
													"schemaId": "q7ATwTYbQDgiigVijUAej:2:Employee Badge:1.0"
												}
											},
											"credentials": [],
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a credential offer as holder by sending an accept offer message\nto the connection associated with the credential exchange record.",
				"tags": [
					"Credentials"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CredentialOfferOptions"
							}
						}
					}
				}
			}
		},
		"/credentials/accept-request": {
			"post": {
				"operationId": "AcceptRequest",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"state": "offer-sent",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b"
											},
											"metadata": {
												"_internal/indyCredential": {
													"credentialDefinitionId": "q7ATwTYbQDgiigVijUAej:3:CL:318187:latest",
													"schemaId": "q7ATwTYbQDgiigVijUAej:2:Employee Badge:1.0"
												}
											},
											"credentials": [],
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a credential request as issuer by sending an accept request message\nto the connection associated with the credential exchange record.",
				"tags": [
					"Credentials"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptCredentialRequestOptions"
							}
						}
					}
				}
			}
		},
		"/credentials/accept-credential": {
			"post": {
				"operationId": "AcceptCredential",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"state": "offer-sent",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b"
											},
											"metadata": {
												"_internal/indyCredential": {
													"credentialDefinitionId": "q7ATwTYbQDgiigVijUAej:3:CL:318187:latest",
													"schemaId": "q7ATwTYbQDgiigVijUAej:2:Employee Badge:1.0"
												}
											},
											"credentials": [],
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a credential as holder by sending an accept credential message\nto the connection associated with the credential exchange record.",
				"tags": [
					"Credentials"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptCredential"
							}
						}
					}
				}
			}
		},
		"/connections": {
			"get": {
				"operationId": "GetAllConnections",
				"responses": {
					"200": {
						"description": "ConnectionRecord[]",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": [
											{
												"_tags": {
													"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
													"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
													"invitationKey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz",
													"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d",
													"verkey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz"
												},
												"metadata": {},
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
											}
										]
									}
								}
							}
						}
					}
				},
				"description": "Retrieve all connections records",
				"tags": [
					"Connections"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "outOfBandId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Alias",
						"in": "query",
						"name": "alias",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Connection state",
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/DidExchangeState"
						}
					},
					{
						"description": "My DID",
						"in": "query",
						"name": "myDid",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Their DID",
						"in": "query",
						"name": "theirDid",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Their label",
						"in": "query",
						"name": "theirLabel",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/connections/{connectionId}": {
			"get": {
				"operationId": "GetConnectionById",
				"responses": {
					"200": {
						"description": "ConnectionRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"invitationKey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d",
												"verkey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz"
											},
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
											"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
											"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieve connection record by connection id",
				"tags": [
					"Connections"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteConnection",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a connection record from the connection repository.",
				"tags": [
					"Connections"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/connections/{connectionId}/accept-request": {
			"post": {
				"operationId": "AcceptRequest",
				"responses": {
					"200": {
						"description": "ConnectionRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"invitationKey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d",
												"verkey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz"
											},
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
											"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
											"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a connection request as inviter by sending a connection response message\nfor the connection with the specified connection id.\n\nThis is not needed when auto accepting of connection is enabled.",
				"tags": [
					"Connections"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/connections/{connectionId}/accept-response": {
			"post": {
				"operationId": "AcceptResponse",
				"responses": {
					"200": {
						"description": "ConnectionRecord",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"invitationKey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d",
												"verkey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz"
											},
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
											"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
											"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Accept a connection response as invitee by sending a trust ping message\nfor the connection with the specified connection id.\n\nThis is not needed when auto accepting of connection is enabled.",
				"tags": [
					"Connections"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/url/{invitationId}": {
			"get": {
				"operationId": "GetInvitation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Connections"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "invitationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/basic-messages/{connectionId}": {
			"get": {
				"operationId": "GetBasicMessages",
				"responses": {
					"200": {
						"description": "BasicMessageRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/BasicMessageRecord"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": [
											{
												"_tags": {
													"role": "sender",
													"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834"
												},
												"metadata": {},
												"id": "74bcf865-1fdc-45b4-b517-9def02dfd25f",
												"createdAt": "2022-08-18T08:38:40.216Z",
												"content": "string",
												"sentTime": "2022-08-18T08:38:40.216Z",
												"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834"
											}
										]
									}
								}
							}
						}
					}
				},
				"description": "Retrieve basic messages by connection id",
				"tags": [
					"Basic Messages"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			},
			"post": {
				"operationId": "SendMessage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Send a basic message to a connection",
				"tags": [
					"Basic Messages"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Record_content.string_"
							}
						}
					}
				}
			}
		},
		"/agent": {
			"get": {
				"operationId": "GetAgentInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AgentInfo"
								}
							}
						}
					}
				},
				"description": "Retrieve basic agent information",
				"tags": [
					"Agent"
				],
				"security": [],
				"parameters": []
			}
		},
		"/agent/wallet": {
			"delete": {
				"operationId": "DeleteWallet",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Delete wallet",
				"tags": [
					"Agent"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": []
			}
		},
		"/question-answer": {
			"get": {
				"operationId": "GetQuestionAnswerRecords",
				"responses": {
					"200": {
						"description": "QuestionAnswerRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Record_string.unknown_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieve question and answer records by query",
				"tags": [
					"Question Answer"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "query",
						"name": "connectionId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Role of the question",
						"in": "query",
						"name": "role",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/QuestionAnswerRole"
						}
					},
					{
						"description": "State of the question",
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/QuestionAnswerState"
						}
					},
					{
						"description": "Thread identifier",
						"in": "query",
						"name": "threadId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/question-answer/question/{connectionId}": {
			"post": {
				"operationId": "SendQuestion",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Send a question to a connection",
				"tags": [
					"Question Answer"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"detail": {
										"type": "string"
									},
									"validResponses": {
										"items": {
											"$ref": "#/components/schemas/ValidResponse"
										},
										"type": "array"
									},
									"question": {
										"type": "string"
									}
								},
								"required": [
									"validResponses",
									"question"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/question-answer/answer/{id}": {
			"post": {
				"operationId": "SendAnswer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Send a answer to question",
				"tags": [
					"Question Answer"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"description": "The id of the question answer record",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Record_response.string_"
							}
						}
					}
				}
			}
		},
		"/question-answer/{id}": {
			"get": {
				"operationId": "GetQuestionAnswerRecordById",
				"responses": {
					"200": {
						"description": "ConnectionRecord",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieve question answer record by id",
				"tags": [
					"Question Answer"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}