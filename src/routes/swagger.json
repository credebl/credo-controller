{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"KeyType": {
				"enum": [
					"ed25519",
					"bls12381g1g2",
					"bls12381g1",
					"bls12381g2",
					"x25519",
					"p256",
					"p384",
					"p521",
					"k256"
				],
				"type": "string"
			},
			"AuthorityAndSubjectKeyDto": {
				"properties": {
					"seed": {
						"type": "string",
						"example": "my-seed-12345"
					},
					"publicKeyBase58": {
						"type": "string",
						"example": "3yPQbnk6WwLgX8K3JZ4t7vBnJ8XqY2mMpRcD9fNvGtHw"
					},
					"keyType": {
						"$ref": "#/components/schemas/KeyType",
						"example": "p256"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"X509CertificateIssuerAndSubjectOptionsDto": {
				"properties": {
					"countryName": {
						"type": "string",
						"example": "US"
					},
					"stateOrProvinceName": {
						"type": "string",
						"example": "California"
					},
					"organizationalUnit": {
						"type": "string",
						"example": "IT Department"
					},
					"commonName": {
						"type": "string",
						"example": "Example Corporation"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ValidityDto": {
				"properties": {
					"notBefore": {
						"type": "string",
						"format": "date-time",
						"example": "2024-01-01T00:00:00.000Z"
					},
					"notAfter": {
						"type": "string",
						"format": "date-time",
						"example": "2025-01-01T00:00:00.000Z"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"X509KeyUsage": {
				"enum": [
					1,
					2,
					4,
					8,
					16,
					32,
					64,
					128,
					256
				],
				"type": "number"
			},
			"KeyUsageDto": {
				"properties": {
					"usages": {
						"items": {
							"$ref": "#/components/schemas/X509KeyUsage"
						},
						"type": "array",
						"example": [
							"digitalSignature",
							"keyEncipherment",
							"crlSign"
						]
					},
					"markAsCritical": {
						"type": "boolean",
						"example": true
					}
				},
				"required": [
					"usages"
				],
				"type": "object",
				"additionalProperties": false
			},
			"X509ExtendedKeyUsage": {
				"enum": [
					"1.3.6.1.5.5.7.3.1",
					"1.3.6.1.5.5.7.3.2",
					"1.3.6.1.5.5.7.3.3",
					"1.3.6.1.5.5.7.3.4",
					"1.3.6.1.5.5.7.3.8",
					"1.3.6.1.5.5.7.3.9",
					"1.0.18013.5.1.2"
				],
				"type": "string"
			},
			"ExtendedKeyUsageDto": {
				"properties": {
					"usages": {
						"items": {
							"$ref": "#/components/schemas/X509ExtendedKeyUsage"
						},
						"type": "array",
						"example": [
							"MdlDs",
							"ServerAuth",
							"ClientAuth"
						]
					},
					"markAsCritical": {
						"type": "boolean",
						"example": true
					}
				},
				"required": [
					"usages"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AuthorityAndSubjectKeyIdentifierDto": {
				"properties": {
					"include": {
						"type": "boolean",
						"example": true
					},
					"markAsCritical": {
						"type": "boolean",
						"example": true
					}
				},
				"required": [
					"include"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GeneralNameType": {
				"enum": [
					"dns",
					"dn",
					"email",
					"guid",
					"ip",
					"url",
					"upn",
					"id"
				],
				"type": "string"
			},
			"NameDto": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/GeneralNameType",
						"example": "dns"
					},
					"value": {
						"type": "string",
						"example": "example.com"
					}
				},
				"required": [
					"type",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NameListDto": {
				"properties": {
					"name": {
						"items": {
							"$ref": "#/components/schemas/NameDto"
						},
						"type": "array",
						"example": [
							{
								"type": "dns",
								"value": "example.com"
							},
							{
								"type": "email",
								"value": "admin@example.com"
							}
						]
					},
					"markAsCritical": {
						"type": "boolean",
						"example": true
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BasicConstraintsDto": {
				"properties": {
					"ca": {
						"type": "boolean",
						"example": false
					},
					"pathLenConstraint": {
						"type": "number",
						"format": "double",
						"example": 0
					},
					"markAsCritical": {
						"type": "boolean",
						"example": true
					}
				},
				"required": [
					"ca"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CrlDistributionPointsDto": {
				"properties": {
					"urls": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"example": [
							"http://crl.example.com/ca.crl"
						]
					},
					"markAsCritical": {
						"type": "boolean",
						"example": true
					}
				},
				"required": [
					"urls"
				],
				"type": "object",
				"additionalProperties": false
			},
			"X509CertificateExtensionsOptionsDto": {
				"properties": {
					"keyUsage": {
						"$ref": "#/components/schemas/KeyUsageDto"
					},
					"extendedKeyUsage": {
						"$ref": "#/components/schemas/ExtendedKeyUsageDto"
					},
					"authorityKeyIdentifier": {
						"$ref": "#/components/schemas/AuthorityAndSubjectKeyIdentifierDto"
					},
					"subjectKeyIdentifier": {
						"$ref": "#/components/schemas/AuthorityAndSubjectKeyIdentifierDto"
					},
					"issuerAlternativeName": {
						"$ref": "#/components/schemas/NameListDto"
					},
					"subjectAlternativeName": {
						"$ref": "#/components/schemas/NameListDto"
					},
					"basicConstraints": {
						"$ref": "#/components/schemas/BasicConstraintsDto"
					},
					"crlDistributionPoints": {
						"$ref": "#/components/schemas/CrlDistributionPointsDto"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"X509CreateCertificateOptionsDto": {
				"properties": {
					"authorityKey": {
						"$ref": "#/components/schemas/AuthorityAndSubjectKeyDto"
					},
					"subjectPublicKey": {
						"$ref": "#/components/schemas/AuthorityAndSubjectKeyDto"
					},
					"serialNumber": {
						"type": "string",
						"example": "1234567890"
					},
					"issuer": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/X509CertificateIssuerAndSubjectOptionsDto"
							},
							{
								"type": "string"
							}
						]
					},
					"subject": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/X509CertificateIssuerAndSubjectOptionsDto"
							},
							{
								"type": "string"
							}
						]
					},
					"validity": {
						"$ref": "#/components/schemas/ValidityDto"
					},
					"extensions": {
						"$ref": "#/components/schemas/X509CertificateExtensionsOptionsDto"
					}
				},
				"required": [
					"issuer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"X509ImportCertificateOptionsDto": {
				"properties": {
					"certificate": {
						"type": "string"
					},
					"privateKey": {
						"type": "string"
					},
					"keyType": {
						"$ref": "#/components/schemas/KeyType"
					}
				},
				"required": [
					"certificate",
					"keyType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Uint8Array": {
				"description": "A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the\nrequested number of bytes could not be allocated an exception is raised.",
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"Key": {
				"properties": {
					"publicKey": {
						"$ref": "#/components/schemas/Uint8Array"
					},
					"keyType": {
						"$ref": "#/components/schemas/KeyType"
					}
				},
				"required": [
					"publicKey",
					"keyType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"X509Certificate": {
				"properties": {
					"publicKey": {
						"$ref": "#/components/schemas/Key"
					},
					"privateKey": {
						"$ref": "#/components/schemas/Uint8Array"
					}
				},
				"required": [
					"publicKey"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.unknown_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"DidOperation.Create": {
				"enum": [
					"createDID"
				],
				"type": "string"
			},
			"CreateDidOperationOptions": {
				"properties": {
					"serviceEndpoint": {
						"type": "string"
					},
					"operation": {
						"$ref": "#/components/schemas/DidOperation.Create"
					}
				},
				"required": [
					"operation"
				],
				"type": "object"
			},
			"DidOperation.Update": {
				"enum": [
					"updateDIDDoc"
				],
				"type": "string"
			},
			"Record_string.any_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"DidDocument": {
				"$ref": "#/components/schemas/Record_string.any_"
			},
			"UpdateDidOperationOptions": {
				"properties": {
					"did": {
						"type": "string"
					},
					"didDocument": {
						"$ref": "#/components/schemas/DidDocument"
					},
					"operation": {
						"$ref": "#/components/schemas/DidOperation.Update"
					}
				},
				"required": [
					"did",
					"didDocument",
					"operation"
				],
				"type": "object"
			},
			"DidOperation.Deactivate": {
				"enum": [
					"deactivate"
				],
				"type": "string"
			},
			"DeactivateDidOperationOptions": {
				"properties": {
					"did": {
						"type": "string"
					},
					"operation": {
						"$ref": "#/components/schemas/DidOperation.Deactivate"
					}
				},
				"required": [
					"did",
					"operation"
				],
				"type": "object"
			},
			"DidOperation.AddResource": {
				"enum": [
					"addResource"
				],
				"type": "string"
			},
			"AddResourceDidOperationOptions": {
				"properties": {
					"did": {
						"type": "string"
					},
					"resource": {
						"additionalProperties": false,
						"type": "object"
					},
					"resourceId": {
						"type": "string"
					},
					"operation": {
						"$ref": "#/components/schemas/DidOperation.AddResource"
					}
				},
				"required": [
					"did",
					"resource",
					"resourceId",
					"operation"
				],
				"type": "object"
			},
			"DidOperationOptions": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/CreateDidOperationOptions"
					},
					{
						"$ref": "#/components/schemas/UpdateDidOperationOptions"
					},
					{
						"$ref": "#/components/schemas/DeactivateDidOperationOptions"
					},
					{
						"$ref": "#/components/schemas/AddResourceDidOperationOptions"
					}
				]
			},
			"EndorserTransaction": {
				"properties": {
					"transaction": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/Record_string.unknown_"
							}
						]
					},
					"endorserDid": {
						"type": "string"
					}
				},
				"required": [
					"transaction",
					"endorserDid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidRegistrationSecretOptions": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"DidOperationStateWait": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"wait"
						],
						"nullable": false
					},
					"did": {
						"type": "string"
					},
					"secret": {
						"$ref": "#/components/schemas/DidRegistrationSecretOptions"
					},
					"didDocument": {
						"$ref": "#/components/schemas/DidDocument"
					}
				},
				"required": [
					"state"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidOperationStateActionBase": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"action"
						],
						"nullable": false
					},
					"action": {
						"type": "string"
					},
					"did": {
						"type": "string"
					},
					"secret": {
						"$ref": "#/components/schemas/DidRegistrationSecretOptions"
					},
					"didDocument": {
						"$ref": "#/components/schemas/DidDocument"
					}
				},
				"required": [
					"state",
					"action"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidOperationStateFinished": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"finished"
						],
						"nullable": false
					},
					"did": {
						"type": "string"
					},
					"secret": {
						"$ref": "#/components/schemas/DidRegistrationSecretOptions"
					},
					"didDocument": {
						"$ref": "#/components/schemas/DidDocument"
					}
				},
				"required": [
					"state",
					"did",
					"didDocument"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidOperationStateFailed": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"failed"
						],
						"nullable": false
					},
					"did": {
						"type": "string"
					},
					"secret": {
						"$ref": "#/components/schemas/DidRegistrationSecretOptions"
					},
					"didDocument": {
						"$ref": "#/components/schemas/DidDocument"
					},
					"reason": {
						"type": "string"
					}
				},
				"required": [
					"state",
					"reason"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidRegistrationMetadata": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"DidResolutionMetadata": {
				"properties": {
					"contentType": {
						"type": "string"
					},
					"error": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "string",
								"enum": [
									"invalidDid",
									"notFound",
									"representationNotSupported",
									"unsupportedDidMethod"
								]
							}
						]
					},
					"message": {
						"type": "string"
					},
					"servedFromCache": {
						"type": "boolean",
						"description": "Whether the did document was served from the cache"
					},
					"servedFromDidRecord": {
						"type": "boolean",
						"description": "Whether the did document was served from a local did record"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DidCreateResult_DidOperationStateActionBase_": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"didState": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/DidOperationStateWait"
							},
							{
								"$ref": "#/components/schemas/DidOperationStateActionBase"
							},
							{
								"$ref": "#/components/schemas/DidOperationStateFinished"
							},
							{
								"$ref": "#/components/schemas/DidOperationStateFailed"
							}
						]
					},
					"didRegistrationMetadata": {
						"$ref": "#/components/schemas/DidRegistrationMetadata"
					},
					"didDocumentMetadata": {
						"$ref": "#/components/schemas/DidResolutionMetadata"
					}
				},
				"required": [
					"didState",
					"didRegistrationMetadata",
					"didDocumentMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidNymTransaction": {
				"properties": {
					"did": {
						"type": "string"
					},
					"nymRequest": {
						"type": "string"
					}
				},
				"required": [
					"did",
					"nymRequest"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsSchema": {
				"properties": {
					"issuerId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"attrNames": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"issuerId",
					"name",
					"version",
					"attrNames"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterSchemaReturnStateWait": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"wait"
						],
						"nullable": false
					},
					"schema": {
						"$ref": "#/components/schemas/AnonCredsSchema"
					},
					"schemaId": {
						"type": "string"
					}
				},
				"required": [
					"state"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterSchemaReturnStateAction": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"action"
						],
						"nullable": false
					},
					"action": {
						"type": "string"
					},
					"schema": {
						"$ref": "#/components/schemas/AnonCredsSchema"
					},
					"schemaId": {
						"type": "string"
					}
				},
				"required": [
					"state",
					"action",
					"schema",
					"schemaId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterSchemaReturnStateFinished": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"finished"
						],
						"nullable": false
					},
					"schema": {
						"$ref": "#/components/schemas/AnonCredsSchema"
					},
					"schemaId": {
						"type": "string"
					}
				},
				"required": [
					"state",
					"schema",
					"schemaId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterSchemaReturnStateFailed": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"failed"
						],
						"nullable": false
					},
					"reason": {
						"type": "string"
					},
					"schema": {
						"$ref": "#/components/schemas/AnonCredsSchema"
					},
					"schemaId": {
						"type": "string"
					}
				},
				"required": [
					"state",
					"reason"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsCredentialDefinition": {
				"properties": {
					"issuerId": {
						"type": "string"
					},
					"schemaId": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"CL"
						],
						"nullable": false
					},
					"tag": {
						"type": "string"
					},
					"value": {
						"properties": {
							"revocation": {},
							"primary": {
								"$ref": "#/components/schemas/Record_string.unknown_"
							}
						},
						"required": [
							"primary"
						],
						"type": "object"
					}
				},
				"required": [
					"issuerId",
					"schemaId",
					"type",
					"tag",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterCredentialDefinitionReturnStateWait": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"wait"
						],
						"nullable": false
					},
					"credentialDefinition": {
						"$ref": "#/components/schemas/AnonCredsCredentialDefinition"
					},
					"credentialDefinitionId": {
						"type": "string"
					}
				},
				"required": [
					"state"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterCredentialDefinitionReturnStateAction": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"action"
						],
						"nullable": false
					},
					"action": {
						"type": "string"
					},
					"credentialDefinitionId": {
						"type": "string"
					},
					"credentialDefinition": {
						"$ref": "#/components/schemas/AnonCredsCredentialDefinition"
					}
				},
				"required": [
					"state",
					"action",
					"credentialDefinitionId",
					"credentialDefinition"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterCredentialDefinitionReturnStateFinished": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"finished"
						],
						"nullable": false
					},
					"credentialDefinition": {
						"$ref": "#/components/schemas/AnonCredsCredentialDefinition"
					},
					"credentialDefinitionId": {
						"type": "string"
					}
				},
				"required": [
					"state",
					"credentialDefinition",
					"credentialDefinitionId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterCredentialDefinitionReturnStateFailed": {
				"properties": {
					"state": {
						"type": "string",
						"enum": [
							"failed"
						],
						"nullable": false
					},
					"reason": {
						"type": "string"
					},
					"credentialDefinition": {
						"$ref": "#/components/schemas/AnonCredsCredentialDefinition"
					},
					"credentialDefinitionId": {
						"type": "string"
					}
				},
				"required": [
					"state",
					"reason"
				],
				"type": "object",
				"additionalProperties": false
			},
			"WriteTransaction": {
				"properties": {
					"endorsedTransaction": {
						"type": "string"
					},
					"endorserDid": {
						"type": "string"
					},
					"schema": {
						"properties": {
							"attributes": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"version": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"issuerId": {
								"type": "string"
							}
						},
						"required": [
							"attributes",
							"version",
							"name",
							"issuerId"
						],
						"type": "object"
					},
					"credentialDefinition": {
						"properties": {
							"type": {
								"type": "string"
							},
							"value": {},
							"tag": {
								"type": "string"
							},
							"issuerId": {
								"type": "string"
							},
							"schemaId": {
								"type": "string"
							}
						},
						"required": [
							"type",
							"value",
							"tag",
							"issuerId",
							"schemaId"
						],
						"type": "object"
					}
				},
				"required": [
					"endorsedTransaction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DIDDocumentMetadata": {
				"description": "Represents metadata about the DID document resulting from a {@link Resolvable.resolve} operation.",
				"properties": {
					"created": {
						"type": "string"
					},
					"updated": {
						"type": "string"
					},
					"deactivated": {
						"type": "boolean"
					},
					"versionId": {
						"type": "string"
					},
					"nextUpdate": {
						"type": "string"
					},
					"nextVersionId": {
						"type": "string"
					},
					"equivalentId": {
						"type": "string"
					},
					"canonicalId": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Did": {
				"type": "string",
				"example": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL"
			},
			"DidCreate": {
				"properties": {
					"keyType": {
						"$ref": "#/components/schemas/KeyType"
					},
					"seed": {
						"type": "string"
					},
					"domain": {
						"type": "string"
					},
					"method": {
						"type": "string"
					},
					"network": {
						"type": "string"
					},
					"did": {
						"type": "string"
					},
					"role": {
						"type": "string"
					},
					"endorserDid": {
						"type": "string"
					},
					"didDocument": {
						"$ref": "#/components/schemas/DidDocument"
					},
					"privatekey": {
						"type": "string"
					},
					"endpoint": {
						"type": "string"
					}
				},
				"required": [
					"method"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DidRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"AnonCredsResolutionMetadata": {
				"properties": {
					"error": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "string",
								"enum": [
									"invalid",
									"notFound",
									"unsupportedAnonCredsMethod"
								]
							}
						]
					},
					"message": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CredoExtensible": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"GetSchemaReturn": {
				"properties": {
					"schema": {
						"$ref": "#/components/schemas/AnonCredsSchema"
					},
					"schemaId": {
						"type": "string"
					},
					"resolutionMetadata": {
						"$ref": "#/components/schemas/AnonCredsResolutionMetadata"
					},
					"schemaMetadata": {
						"$ref": "#/components/schemas/CredoExtensible"
					}
				},
				"required": [
					"schemaId",
					"resolutionMetadata",
					"schemaMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SchemaId": {
				"type": "string",
				"example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
			},
			"RegisterSchemaReturn": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"schemaState": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/RegisterSchemaReturnStateWait"
							},
							{
								"$ref": "#/components/schemas/RegisterSchemaReturnStateAction"
							},
							{
								"$ref": "#/components/schemas/RegisterSchemaReturnStateFinished"
							},
							{
								"$ref": "#/components/schemas/RegisterSchemaReturnStateFailed"
							}
						]
					},
					"schemaMetadata": {
						"$ref": "#/components/schemas/CredoExtensible"
					},
					"registrationMetadata": {
						"$ref": "#/components/schemas/CredoExtensible"
					}
				},
				"required": [
					"schemaState",
					"schemaMetadata",
					"registrationMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateSchemaInput": {
				"properties": {
					"issuerId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"attributes": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"endorse": {
						"type": "boolean"
					},
					"endorserDid": {
						"type": "string"
					}
				},
				"required": [
					"issuerId",
					"name",
					"version",
					"attributes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetCredentialDefinitionReturn": {
				"properties": {
					"credentialDefinition": {
						"$ref": "#/components/schemas/AnonCredsCredentialDefinition"
					},
					"credentialDefinitionId": {
						"type": "string"
					},
					"resolutionMetadata": {
						"$ref": "#/components/schemas/AnonCredsResolutionMetadata"
					},
					"credentialDefinitionMetadata": {
						"$ref": "#/components/schemas/CredoExtensible"
					}
				},
				"required": [
					"credentialDefinitionId",
					"resolutionMetadata",
					"credentialDefinitionMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialDefinitionId": {
				"type": "string",
				"example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
			},
			"RegisterCredentialDefinitionReturn": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"credentialDefinitionState": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/RegisterCredentialDefinitionReturnStateWait"
							},
							{
								"$ref": "#/components/schemas/RegisterCredentialDefinitionReturnStateAction"
							},
							{
								"$ref": "#/components/schemas/RegisterCredentialDefinitionReturnStateFinished"
							},
							{
								"$ref": "#/components/schemas/RegisterCredentialDefinitionReturnStateFailed"
							}
						]
					},
					"credentialDefinitionMetadata": {
						"$ref": "#/components/schemas/CredoExtensible"
					},
					"registrationMetadata": {
						"$ref": "#/components/schemas/CredoExtensible"
					}
				},
				"required": [
					"credentialDefinitionState",
					"credentialDefinitionMetadata",
					"registrationMetadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AgentInfo": {
				"properties": {
					"label": {
						"type": "string"
					},
					"endpoints": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"isInitialized": {
						"type": "boolean"
					},
					"publicDid": {}
				},
				"required": [
					"label",
					"endpoints",
					"isInitialized",
					"publicDid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AgentToken": {
				"properties": {
					"token": {
						"type": "string"
					}
				},
				"required": [
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VerifyDataOptions": {
				"properties": {
					"signature": {
						"type": "string"
					},
					"publicKeyBase58": {
						"type": "string"
					},
					"keyType": {
						"$ref": "#/components/schemas/KeyType"
					},
					"data": {
						"type": "string"
					}
				},
				"required": [
					"signature",
					"publicKeyBase58",
					"keyType",
					"data"
				],
				"type": "object"
			},
			"W3cCredentialRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"JsonObject": {
				"properties": {},
				"type": "object",
				"additionalProperties": {
					"$ref": "#/components/schemas/JsonValue"
				}
			},
			"JsonValue": {
				"anyOf": [
					{
						"type": "string"
					},
					{
						"type": "number",
						"format": "double"
					},
					{
						"type": "boolean"
					},
					{
						"$ref": "#/components/schemas/JsonObject"
					},
					{
						"$ref": "#/components/schemas/JsonArray"
					}
				],
				"nullable": true
			},
			"JsonArray": {
				"items": {
					"$ref": "#/components/schemas/JsonValue"
				},
				"type": "array"
			},
			"W3cIssuer": {
				"properties": {
					"id": {
						"type": "string"
					}
				},
				"required": [
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"W3cCredentialSubject": {
				"properties": {
					"id": {
						"type": "string"
					},
					"claims": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"SingleOrArray_W3cCredentialSubject_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/W3cCredentialSubject"
					},
					{
						"items": {
							"$ref": "#/components/schemas/W3cCredentialSubject"
						},
						"type": "array"
					}
				]
			},
			"W3cCredentialSchema": {
				"properties": {
					"id": {
						"type": "string"
					},
					"type": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SingleOrArray_W3cCredentialSchema_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/W3cCredentialSchema"
					},
					{
						"items": {
							"$ref": "#/components/schemas/W3cCredentialSchema"
						},
						"type": "array"
					}
				]
			},
			"W3cCredentialStatus": {
				"properties": {
					"id": {
						"type": "string"
					},
					"type": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"W3cCredential": {
				"properties": {
					"context": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/JsonObject"
								}
							]
						},
						"type": "array"
					},
					"id": {
						"type": "string"
					},
					"type": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"issuer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/W3cIssuer"
							}
						]
					},
					"issuanceDate": {
						"type": "string"
					},
					"expirationDate": {
						"type": "string"
					},
					"credentialSubject": {
						"$ref": "#/components/schemas/SingleOrArray_W3cCredentialSubject_"
					},
					"credentialSchema": {
						"$ref": "#/components/schemas/SingleOrArray_W3cCredentialSchema_"
					},
					"credentialStatus": {
						"$ref": "#/components/schemas/W3cCredentialStatus"
					}
				},
				"required": [
					"context",
					"type",
					"issuer",
					"issuanceDate",
					"credentialSubject"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_W3cJsonLdSignCredentialOptions.Exclude_keyofW3cJsonLdSignCredentialOptions.format__": {
				"properties": {
					"credential": {
						"$ref": "#/components/schemas/W3cCredential",
						"description": "The credential to be signed."
					},
					"proofType": {
						"type": "string",
						"description": "The proofType to be used for signing the credential.\n\nMust be a valid Linked Data Signature suite."
					},
					"proofPurpose": {},
					"created": {
						"type": "string"
					},
					"verificationMethod": {
						"type": "string",
						"description": "URI of the verificationMethod to be used for signing the credential.\n\nMust be a valid did url pointing to a key."
					}
				},
				"required": [
					"credential",
					"proofType",
					"verificationMethod"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_W3cJsonLdSignCredentialOptions.format_": {
				"$ref": "#/components/schemas/Pick_W3cJsonLdSignCredentialOptions.Exclude_keyofW3cJsonLdSignCredentialOptions.format__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CustomW3cJsonLdSignCredentialOptions": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Omit_W3cJsonLdSignCredentialOptions.format_"
					},
					{
						"properties": {},
						"additionalProperties": {},
						"type": "object"
					}
				]
			},
			"SignDataOptions": {
				"properties": {
					"method": {
						"type": "string"
					},
					"did": {
						"type": "string"
					},
					"publicKeyBase58": {
						"type": "string"
					},
					"keyType": {
						"$ref": "#/components/schemas/KeyType"
					},
					"data": {
						"type": "string"
					}
				},
				"required": [
					"publicKeyBase58",
					"keyType",
					"data"
				],
				"type": "object"
			},
			"Partial_W3cCredentialValidations_": {
				"properties": {},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Error": {
				"properties": {
					"name": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"stack": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"W3cVerifyResult_W3cCredentialValidations_": {
				"properties": {
					"isValid": {
						"type": "boolean",
						"description": "Whether the verification as a whole is valid. This means that\nall validations inside the validations object should have passed."
					},
					"validations": {
						"$ref": "#/components/schemas/Partial_W3cCredentialValidations_",
						"description": "Validations that have been performed"
					},
					"error": {
						"$ref": "#/components/schemas/Error",
						"description": "Error that was caught during verification not related to\nany of the specific validations that are performed"
					}
				},
				"required": [
					"isValid",
					"validations"
				],
				"type": "object",
				"additionalProperties": false
			},
			"W3cVerifyCredentialResult": {
				"$ref": "#/components/schemas/W3cVerifyResult_W3cCredentialValidations_"
			},
			"Pick_LinkedDataProofOptions.Exclude_keyofLinkedDataProofOptions.cryptosuite__": {
				"properties": {
					"proofPurpose": {
						"type": "string"
					},
					"created": {
						"type": "string"
					},
					"verificationMethod": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"domain": {
						"type": "string"
					},
					"challenge": {
						"type": "string"
					},
					"jws": {
						"type": "string"
					},
					"proofValue": {
						"type": "string"
					},
					"nonce": {
						"type": "string"
					}
				},
				"required": [
					"proofPurpose",
					"created",
					"verificationMethod",
					"type"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_LinkedDataProofOptions.cryptosuite_": {
				"$ref": "#/components/schemas/Pick_LinkedDataProofOptions.Exclude_keyofLinkedDataProofOptions.cryptosuite__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"DataIntegrityProofOptions": {
				"properties": {
					"type": {
						"type": "string"
					},
					"cryptosuite": {
						"type": "string"
					},
					"verificationMethod": {
						"type": "string"
					},
					"proofPurpose": {
						"type": "string"
					},
					"domain": {
						"type": "string"
					},
					"challenge": {
						"type": "string"
					},
					"nonce": {
						"type": "string"
					},
					"created": {
						"type": "string"
					},
					"expires": {
						"type": "string"
					},
					"proofValue": {
						"type": "string"
					},
					"previousProof": {
						"type": "string"
					}
				},
				"required": [
					"type",
					"cryptosuite",
					"verificationMethod",
					"proofPurpose"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SingleOrArray_Omit_LinkedDataProofOptions.cryptosuite_-or-DataIntegrityProofOptions_": {
				"anyOf": [
					{
						"anyOf": [
							{
								"$ref": "#/components/schemas/Omit_LinkedDataProofOptions.cryptosuite_"
							},
							{
								"$ref": "#/components/schemas/DataIntegrityProofOptions"
							}
						]
					},
					{
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/Omit_LinkedDataProofOptions.cryptosuite_"
								},
								{
									"$ref": "#/components/schemas/DataIntegrityProofOptions"
								}
							]
						},
						"type": "array"
					}
				]
			},
			"LinkedDataProof": {
				"description": "Linked Data Proof",
				"properties": {
					"type": {
						"type": "string"
					},
					"proofPurpose": {
						"type": "string"
					},
					"verificationMethod": {
						"type": "string"
					},
					"created": {
						"type": "string"
					},
					"domain": {
						"type": "string"
					},
					"challenge": {
						"type": "string"
					},
					"jws": {
						"type": "string"
					},
					"proofValue": {
						"type": "string"
					},
					"nonce": {
						"type": "string"
					}
				},
				"required": [
					"type",
					"proofPurpose",
					"verificationMethod",
					"created"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DataIntegrityProof": {
				"description": "Linked Data Proof",
				"properties": {
					"type": {
						"type": "string"
					},
					"cryptosuite": {
						"type": "string"
					},
					"proofPurpose": {
						"type": "string"
					},
					"verificationMethod": {
						"type": "string"
					},
					"domain": {
						"type": "string"
					},
					"challenge": {
						"type": "string"
					},
					"nonce": {
						"type": "string"
					},
					"created": {
						"type": "string"
					},
					"expires": {
						"type": "string"
					},
					"proofValue": {
						"type": "string"
					},
					"previousProof": {
						"type": "string"
					}
				},
				"required": [
					"type",
					"cryptosuite",
					"proofPurpose",
					"verificationMethod"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SingleOrArray_LinkedDataProof-or-DataIntegrityProof_": {
				"anyOf": [
					{
						"anyOf": [
							{
								"$ref": "#/components/schemas/LinkedDataProof"
							},
							{
								"$ref": "#/components/schemas/DataIntegrityProof"
							}
						]
					},
					{
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/LinkedDataProof"
								},
								{
									"$ref": "#/components/schemas/DataIntegrityProof"
								}
							]
						},
						"type": "array"
					}
				]
			},
			"W3cJsonLdVerifiableCredential": {
				"properties": {
					"context": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/JsonObject"
								}
							]
						},
						"type": "array"
					},
					"id": {
						"type": "string"
					},
					"type": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"issuer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/W3cIssuer"
							}
						]
					},
					"issuanceDate": {
						"type": "string"
					},
					"expirationDate": {
						"type": "string"
					},
					"credentialSubject": {
						"$ref": "#/components/schemas/SingleOrArray_W3cCredentialSubject_"
					},
					"credentialSchema": {
						"$ref": "#/components/schemas/SingleOrArray_W3cCredentialSchema_"
					},
					"credentialStatus": {
						"$ref": "#/components/schemas/W3cCredentialStatus"
					},
					"proof": {
						"$ref": "#/components/schemas/SingleOrArray_LinkedDataProof-or-DataIntegrityProof_"
					}
				},
				"required": [
					"context",
					"type",
					"issuer",
					"issuanceDate",
					"credentialSubject",
					"proof"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ProofPurpose": {},
			"SafeW3cJsonLdVerifyCredentialOptions": {
				"properties": {
					"credential": {
						"$ref": "#/components/schemas/W3cJsonLdVerifiableCredential"
					},
					"verifyCredentialStatus": {
						"type": "boolean",
						"description": "Whether to verify the credentialStatus, if present."
					},
					"proofPurpose": {
						"$ref": "#/components/schemas/ProofPurpose"
					},
					"proof": {
						"$ref": "#/components/schemas/SingleOrArray_Omit_LinkedDataProofOptions.cryptosuite_-or-DataIntegrityProofOptions_"
					}
				},
				"required": [
					"credential",
					"proof"
				],
				"type": "object",
				"additionalProperties": false
			},
			"QuestionAnswerRole": {
				"enum": [
					"questioner",
					"responder"
				],
				"type": "string"
			},
			"QuestionAnswerState": {
				"description": "QuestionAnswer states inferred from RFC 0113.",
				"enum": [
					"question-sent",
					"question-received",
					"answer-received",
					"answer-sent"
				],
				"type": "string"
			},
			"RecordId": {
				"type": "string",
				"example": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e"
			},
			"ValidResponse": {
				"properties": {
					"text": {
						"type": "string"
					}
				},
				"required": [
					"text"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_response.string_": {
				"properties": {
					"response": {
						"type": "string"
					}
				},
				"required": [
					"response"
				],
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"ProofExchangeRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"AutoAcceptProof": {
				"description": "Typing of the state for auto acceptance",
				"enum": [
					"always",
					"contentApproved",
					"never"
				],
				"type": "string"
			},
			"RequestProofProposalOptions": {
				"properties": {
					"connectionId": {
						"type": "string"
					},
					"proofFormats": {},
					"goalCode": {
						"type": "string"
					},
					"parentThreadId": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"connectionId",
					"proofFormats"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AcceptProofProposal": {
				"properties": {
					"proofRecordId": {
						"type": "string"
					},
					"proofFormats": {},
					"comment": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"goalCode": {
						"type": "string"
					},
					"willConfirm": {
						"type": "boolean"
					}
				},
				"required": [
					"proofRecordId",
					"proofFormats"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RequestProofOptions": {
				"properties": {
					"connectionId": {
						"type": "string"
					},
					"protocolVersion": {
						"type": "string"
					},
					"proofFormats": {},
					"comment": {
						"type": "string"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"goalCode": {
						"type": "string"
					},
					"parentThreadId": {
						"type": "string"
					},
					"willConfirm": {
						"type": "boolean"
					}
				},
				"required": [
					"connectionId",
					"protocolVersion",
					"proofFormats",
					"comment",
					"autoAcceptProof"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PlaintextMessage": {
				"properties": {
					"@type": {
						"type": "string"
					},
					"@id": {
						"type": "string"
					},
					"~thread": {
						"properties": {
							"pthid": {
								"type": "string"
							},
							"thid": {
								"type": "string"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"@type",
					"@id"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"CreateProofRequestOobOptions": {
				"properties": {
					"protocolVersion": {
						"type": "string"
					},
					"proofFormats": {},
					"goalCode": {
						"type": "string"
					},
					"parentThreadId": {
						"type": "string"
					},
					"willConfirm": {
						"type": "boolean"
					},
					"autoAcceptProof": {
						"$ref": "#/components/schemas/AutoAcceptProof"
					},
					"comment": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"recipientKey": {
						"type": "string"
					},
					"invitationDid": {
						"type": "string"
					}
				},
				"required": [
					"protocolVersion",
					"proofFormats"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ProofFormatDataMessagePayload__40_LegacyIndyProofFormat-or-AnonCredsProofFormat-or-DifPresentationExchangeProofFormat_41_-Array.proposal_": {
				"properties": {},
				"type": "object",
				"description": "Get the format data payload for a specific message from a list of ProofFormat interfaces and a message\n\nFor an indy offer, this resolves to the proof request format as defined here:\nhttps://github.com/hyperledger/aries-rfcs/tree/b3a3942ef052039e73cd23d847f42947f8287da2/features/0592-indy-attachments#proof-request-format"
			},
			"ProofFormatDataMessagePayload__40_LegacyIndyProofFormat-or-AnonCredsProofFormat-or-DifPresentationExchangeProofFormat_41_-Array.request_": {
				"properties": {},
				"type": "object",
				"description": "Get the format data payload for a specific message from a list of ProofFormat interfaces and a message\n\nFor an indy offer, this resolves to the proof request format as defined here:\nhttps://github.com/hyperledger/aries-rfcs/tree/b3a3942ef052039e73cd23d847f42947f8287da2/features/0592-indy-attachments#proof-request-format"
			},
			"ProofFormatDataMessagePayload__40_LegacyIndyProofFormat-or-AnonCredsProofFormat-or-DifPresentationExchangeProofFormat_41_-Array.presentation_": {
				"properties": {},
				"type": "object",
				"description": "Get the format data payload for a specific message from a list of ProofFormat interfaces and a message\n\nFor an indy offer, this resolves to the proof request format as defined here:\nhttps://github.com/hyperledger/aries-rfcs/tree/b3a3942ef052039e73cd23d847f42947f8287da2/features/0592-indy-attachments#proof-request-format"
			},
			"GetProofFormatDataReturn__40_LegacyIndyProofFormat-or-AnonCredsProofFormat-or-DifPresentationExchangeProofFormat_41_-Array_": {
				"properties": {
					"presentation": {
						"$ref": "#/components/schemas/ProofFormatDataMessagePayload__40_LegacyIndyProofFormat-or-AnonCredsProofFormat-or-DifPresentationExchangeProofFormat_41_-Array.presentation_"
					},
					"request": {
						"$ref": "#/components/schemas/ProofFormatDataMessagePayload__40_LegacyIndyProofFormat-or-AnonCredsProofFormat-or-DifPresentationExchangeProofFormat_41_-Array.request_"
					},
					"proposal": {
						"$ref": "#/components/schemas/ProofFormatDataMessagePayload__40_LegacyIndyProofFormat-or-AnonCredsProofFormat-or-DifPresentationExchangeProofFormat_41_-Array.proposal_"
					}
				},
				"type": "object"
			},
			"HandshakeProtocol": {
				"description": "Enum values should be sorted based on order of preference. Values will be\nincluded in this order when creating out of band invitations.",
				"enum": [
					"https://didcomm.org/didexchange/1.x",
					"https://didcomm.org/connections/1.x"
				],
				"type": "string"
			},
			"AgentMessage": {
				"$ref": "#/components/schemas/PlaintextMessage"
			},
			"Routing": {
				"properties": {
					"endpoints": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"recipientKey": {
						"$ref": "#/components/schemas/Key"
					},
					"routingKeys": {
						"items": {
							"$ref": "#/components/schemas/Key"
						},
						"type": "array"
					},
					"mediatorId": {
						"type": "string"
					}
				},
				"required": [
					"endpoints",
					"recipientKey",
					"routingKeys"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_JwsGeneralFormat.Exclude_keyofJwsGeneralFormat.payload__": {
				"properties": {
					"header": {
						"$ref": "#/components/schemas/Record_string.unknown_",
						"description": "unprotected header"
					},
					"signature": {
						"type": "string",
						"description": "Base64url encoded signature"
					},
					"protected": {
						"type": "string",
						"description": "Base64url encoded protected header"
					}
				},
				"required": [
					"header",
					"signature",
					"protected"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_JwsGeneralFormat.payload_": {
				"$ref": "#/components/schemas/Pick_JwsGeneralFormat.Exclude_keyofJwsGeneralFormat.payload__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"JwsDetachedFormat": {
				"$ref": "#/components/schemas/Omit_JwsGeneralFormat.payload_"
			},
			"JwsFlattenedDetachedFormat": {
				"properties": {
					"signatures": {
						"items": {
							"$ref": "#/components/schemas/JwsDetachedFormat"
						},
						"type": "array"
					}
				},
				"required": [
					"signatures"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AttachmentData": {
				"description": "A JSON object that gives access to the actual content of the attachment",
				"properties": {
					"base64": {
						"type": "string",
						"description": "Base64-encoded data, when representing arbitrary content inline instead of via links. Optional."
					},
					"json": {
						"$ref": "#/components/schemas/JsonValue",
						"description": "Directly embedded JSON data, when representing content inline instead of via links, and when the content is natively conveyable as JSON. Optional."
					},
					"links": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "A list of zero or more locations at which the content may be fetched. Optional."
					},
					"jws": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JwsDetachedFormat"
							},
							{
								"$ref": "#/components/schemas/JwsFlattenedDetachedFormat"
							}
						],
						"description": "A JSON Web Signature over the content of the attachment. Optional."
					},
					"sha256": {
						"type": "string",
						"description": "The hash of the content. Optional."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Attachment": {
				"description": "Represents DIDComm attachment\nhttps://github.com/hyperledger/aries-rfcs/blob/master/concepts/0017-attachments/README.md",
				"properties": {
					"id": {
						"type": "string"
					},
					"description": {
						"type": "string",
						"description": "An optional human-readable description of the content."
					},
					"filename": {
						"type": "string",
						"description": "A hint about the name that might be used if this attachment is persisted as a file. It is not required, and need not be unique. If this field is present and mime-type is not, the extension on the filename may be used to infer a MIME type."
					},
					"mimeType": {
						"type": "string",
						"description": "Describes the MIME type of the attached content. Optional but recommended."
					},
					"lastmodTime": {
						"type": "string",
						"format": "date-time",
						"description": "A hint about when the content in this attachment was last modified."
					},
					"byteCount": {
						"type": "number",
						"format": "double",
						"description": "Optional, and mostly relevant when content is included by reference instead of by value. Lets the receiver guess how expensive it will be, in time, bandwidth, and storage, to fully fetch the attachment."
					},
					"data": {
						"$ref": "#/components/schemas/AttachmentData"
					}
				},
				"required": [
					"id",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateInvitationOptions": {
				"properties": {
					"label": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"goalCode": {
						"type": "string"
					},
					"goal": {
						"type": "string"
					},
					"handshake": {
						"type": "boolean"
					},
					"handshakeProtocols": {
						"items": {
							"$ref": "#/components/schemas/HandshakeProtocol"
						},
						"type": "array"
					},
					"messages": {
						"items": {
							"$ref": "#/components/schemas/AgentMessage"
						},
						"type": "array"
					},
					"multiUseInvitation": {
						"type": "boolean"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					},
					"routing": {
						"$ref": "#/components/schemas/Routing"
					},
					"appendedAttachments": {
						"items": {
							"$ref": "#/components/schemas/Attachment"
						},
						"type": "array"
					},
					"invitationDid": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"RecipientKeyOption": {
				"properties": {
					"recipientKey": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_CreateLegacyInvitationConfig.Exclude_keyofCreateLegacyInvitationConfig.routing__": {
				"properties": {
					"alias": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"multiUseInvitation": {
						"type": "boolean"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_CreateLegacyInvitationConfig.routing_": {
				"$ref": "#/components/schemas/Pick_CreateLegacyInvitationConfig.Exclude_keyofCreateLegacyInvitationConfig.routing__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"OutOfBandRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"CustomHandshakeProtocol": {
				"enum": [
					"https://didcomm.org/didexchange/1.1",
					"https://didcomm.org/connections/1.0"
				],
				"type": "string"
			},
			"SingleOrArray_string-or-Record_string.unknown__": {
				"anyOf": [
					{
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/Record_string.unknown_"
							}
						]
					},
					{
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/Record_string.unknown_"
								}
							]
						},
						"type": "array"
					}
				]
			},
			"OutOfBandDidCommService": {
				"properties": {
					"id": {
						"type": "string"
					},
					"serviceEndpoint": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"recipientKeys": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"routingKeys": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"accept": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"serviceEndpoint",
					"type",
					"recipientKeys"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OutOfBandInvitationSchema": {
				"properties": {
					"@id": {
						"type": "string"
					},
					"@type": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"goalCode": {
						"type": "string"
					},
					"goal": {
						"type": "string"
					},
					"accept": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"handshake_protocols": {
						"items": {
							"$ref": "#/components/schemas/CustomHandshakeProtocol"
						},
						"type": "array"
					},
					"services": {
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/OutOfBandDidCommService"
								},
								{
									"type": "string"
								}
							]
						},
						"type": "array"
					},
					"imageUrl": {
						"type": "string"
					}
				},
				"required": [
					"@type",
					"label",
					"services"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_ReceiveOutOfBandInvitationConfig.Exclude_keyofReceiveOutOfBandInvitationConfig.routing__": {
				"properties": {
					"alias": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					},
					"autoAcceptInvitation": {
						"type": "boolean"
					},
					"reuseConnection": {
						"type": "boolean"
					},
					"acceptInvitationTimeoutMs": {
						"type": "number",
						"format": "double"
					},
					"ourDid": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_ReceiveOutOfBandInvitationConfig.routing_": {
				"$ref": "#/components/schemas/Pick_ReceiveOutOfBandInvitationConfig.Exclude_keyofReceiveOutOfBandInvitationConfig.routing__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"ReceiveInvitationProps": {
				"properties": {
					"alias": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					},
					"autoAcceptInvitation": {
						"type": "boolean"
					},
					"reuseConnection": {
						"type": "boolean"
					},
					"acceptInvitationTimeoutMs": {
						"type": "number",
						"format": "double"
					},
					"ourDid": {
						"type": "string"
					},
					"invitation": {
						"$ref": "#/components/schemas/OutOfBandInvitationSchema"
					}
				},
				"required": [
					"invitation"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ReceiveInvitationByUrlProps": {
				"properties": {
					"alias": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"autoAcceptConnection": {
						"type": "boolean"
					},
					"autoAcceptInvitation": {
						"type": "boolean"
					},
					"reuseConnection": {
						"type": "boolean"
					},
					"acceptInvitationTimeoutMs": {
						"type": "number",
						"format": "double"
					},
					"ourDid": {
						"type": "string"
					},
					"invitationUrl": {
						"type": "string"
					}
				},
				"required": [
					"invitationUrl"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AcceptInvitationConfig": {
				"properties": {
					"autoAcceptConnection": {
						"type": "boolean"
					},
					"reuseConnection": {
						"type": "boolean"
					},
					"label": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"mediatorId": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ThreadId": {
				"type": "string",
				"example": "ea4e5e69-fc04-465a-90d2-9f8ff78aa71d"
			},
			"CredentialState": {
				"description": "Issue Credential states as defined in RFC 0036 and RFC 0453",
				"enum": [
					"proposal-sent",
					"proposal-received",
					"offer-sent",
					"offer-received",
					"declined",
					"request-sent",
					"request-received",
					"credential-issued",
					"credential-received",
					"done",
					"abandoned"
				],
				"type": "string"
			},
			"CredentialRole": {
				"enum": [
					"issuer",
					"holder"
				],
				"type": "string"
			},
			"CredentialExchangeRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"ProtocolVersion": {
				"enum": [
					"v1",
					"v2"
				],
				"type": "string"
			},
			"CredentialPreviewAttributeOptions": {
				"properties": {
					"name": {
						"type": "string"
					},
					"mimeType": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LinkedAttachment": {
				"properties": {
					"attributeName": {
						"type": "string",
						"description": "The name that will be used to generate the linked credential"
					},
					"attachment": {
						"$ref": "#/components/schemas/Attachment",
						"description": "The attachment that needs to be linked to the credential"
					}
				},
				"required": [
					"attributeName",
					"attachment"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_AnonCredsProposeCredentialFormat.Exclude_keyofAnonCredsProposeCredentialFormat.schemaIssuerId-or-issuerId__": {
				"properties": {
					"schemaId": {
						"type": "string"
					},
					"schemaName": {
						"type": "string"
					},
					"schemaVersion": {
						"type": "string"
					},
					"credentialDefinitionId": {
						"type": "string"
					},
					"attributes": {
						"items": {
							"$ref": "#/components/schemas/CredentialPreviewAttributeOptions"
						},
						"type": "array"
					},
					"linkedAttachments": {
						"items": {
							"$ref": "#/components/schemas/LinkedAttachment"
						},
						"type": "array"
					},
					"schemaIssuerDid": {
						"type": "string"
					},
					"issuerDid": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_AnonCredsProposeCredentialFormat.schemaIssuerId-or-issuerId_": {
				"$ref": "#/components/schemas/Pick_AnonCredsProposeCredentialFormat.Exclude_keyofAnonCredsProposeCredentialFormat.schemaIssuerId-or-issuerId__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"LegacyIndyProposeCredentialFormat": {
				"$ref": "#/components/schemas/Omit_AnonCredsProposeCredentialFormat.schemaIssuerId-or-issuerId_",
				"description": "This defines the module payload for calling CredentialsApi.createProposal\nor CredentialsApi.negotiateOffer\n\nNOTE: This doesn't include the `issuerId` and `schemaIssuerId` properties that are present in the newer format."
			},
			"W3cIssuerOptions": {
				"description": "TODO: check how to support arbitrary data in class",
				"properties": {
					"id": {
						"type": "string"
					}
				},
				"required": [
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SingleOrArray_JsonObject_": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/JsonObject"
					},
					{
						"items": {
							"$ref": "#/components/schemas/JsonObject"
						},
						"type": "array"
					}
				]
			},
			"JsonCredential": {
				"properties": {
					"@context": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"$ref": "#/components/schemas/JsonObject"
							}
						]
					},
					"id": {
						"type": "string"
					},
					"type": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"issuer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/W3cIssuerOptions"
							}
						]
					},
					"issuanceDate": {
						"type": "string"
					},
					"expirationDate": {
						"type": "string"
					},
					"credentialSubject": {
						"$ref": "#/components/schemas/SingleOrArray_JsonObject_"
					},
					"prettyVc": {}
				},
				"required": [
					"@context",
					"type",
					"issuer",
					"issuanceDate",
					"credentialSubject"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"JsonLdCredentialDetailFormat": {
				"description": "Format for creating a jsonld proposal, offer or request.",
				"properties": {
					"credential": {
						"$ref": "#/components/schemas/JsonCredential"
					},
					"options": {
						"properties": {
							"proofType": {
								"type": "string"
							},
							"proofPurpose": {
								"type": "string"
							}
						},
						"required": [
							"proofType",
							"proofPurpose"
						],
						"type": "object"
					}
				},
				"required": [
					"credential",
					"options"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsProposeCredentialFormat": {
				"description": "This defines the module payload for calling CredentialsApi.createProposal\nor CredentialsApi.negotiateOffer",
				"properties": {
					"schemaIssuerId": {
						"type": "string"
					},
					"schemaId": {
						"type": "string"
					},
					"schemaName": {
						"type": "string"
					},
					"schemaVersion": {
						"type": "string"
					},
					"credentialDefinitionId": {
						"type": "string"
					},
					"issuerId": {
						"type": "string"
					},
					"attributes": {
						"items": {
							"$ref": "#/components/schemas/CredentialPreviewAttributeOptions"
						},
						"type": "array"
					},
					"linkedAttachments": {
						"items": {
							"$ref": "#/components/schemas/LinkedAttachment"
						},
						"type": "array"
					},
					"schemaIssuerDid": {
						"type": "string"
					},
					"issuerDid": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatPayload_CredentialFormatType-Array.createProposal_": {
				"properties": {
					"indy": {
						"$ref": "#/components/schemas/LegacyIndyProposeCredentialFormat"
					},
					"jsonld": {
						"$ref": "#/components/schemas/JsonLdCredentialDetailFormat"
					},
					"anoncreds": {
						"$ref": "#/components/schemas/AnonCredsProposeCredentialFormat"
					}
				},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"AutoAcceptCredential": {
				"description": "Typing of the state for auto acceptance",
				"enum": [
					"always",
					"contentApproved",
					"never"
				],
				"type": "string"
			},
			"ProposeCredentialOptions": {
				"properties": {
					"protocolVersion": {
						"$ref": "#/components/schemas/ProtocolVersion"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormatType-Array.createProposal_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					},
					"connectionId": {
						"$ref": "#/components/schemas/RecordId"
					}
				},
				"required": [
					"protocolVersion",
					"credentialFormats",
					"connectionId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsAcceptProposalFormat": {
				"description": "This defines the module payload for calling CredentialsApi.acceptProposal",
				"properties": {
					"credentialDefinitionId": {
						"type": "string"
					},
					"revocationRegistryDefinitionId": {
						"type": "string"
					},
					"revocationRegistryIndex": {
						"type": "number",
						"format": "double"
					},
					"attributes": {
						"items": {
							"$ref": "#/components/schemas/CredentialPreviewAttributeOptions"
						},
						"type": "array"
					},
					"linkedAttachments": {
						"items": {
							"$ref": "#/components/schemas/LinkedAttachment"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.never_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"EmptyObject": {
				"$ref": "#/components/schemas/Record_string.never_"
			},
			"CredentialFormatPayload_CredentialFormats.acceptProposal_": {
				"properties": {
					"indy": {
						"$ref": "#/components/schemas/AnonCredsAcceptProposalFormat"
					},
					"jsonld": {
						"$ref": "#/components/schemas/EmptyObject"
					},
					"anoncreds": {
						"$ref": "#/components/schemas/AnonCredsAcceptProposalFormat"
					}
				},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"AcceptCredentialProposalOptions": {
				"properties": {
					"credentialRecordId": {
						"type": "string"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormats.acceptProposal_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"credentialRecordId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsOfferCredentialFormat": {
				"description": "This defines the module payload for calling CredentialsApi.offerCredential\nor CredentialsApi.negotiateProposal",
				"properties": {
					"credentialDefinitionId": {
						"type": "string"
					},
					"revocationRegistryDefinitionId": {
						"type": "string"
					},
					"revocationRegistryIndex": {
						"type": "number",
						"format": "double"
					},
					"attributes": {
						"items": {
							"$ref": "#/components/schemas/CredentialPreviewAttributeOptions"
						},
						"type": "array"
					},
					"linkedAttachments": {
						"items": {
							"$ref": "#/components/schemas/LinkedAttachment"
						},
						"type": "array"
					}
				},
				"required": [
					"credentialDefinitionId",
					"attributes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatPayload_CredentialFormats.createOffer_": {
				"properties": {
					"indy": {
						"$ref": "#/components/schemas/AnonCredsOfferCredentialFormat"
					},
					"jsonld": {
						"$ref": "#/components/schemas/JsonLdCredentialDetailFormat"
					},
					"anoncreds": {
						"$ref": "#/components/schemas/AnonCredsOfferCredentialFormat"
					}
				},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"CreateOfferOptions": {
				"properties": {
					"protocolVersion": {
						"$ref": "#/components/schemas/ProtocolVersion"
					},
					"connectionId": {
						"$ref": "#/components/schemas/RecordId"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormats.createOffer_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					},
					"goalCode": {
						"type": "string"
					},
					"goal": {
						"type": "string"
					}
				},
				"required": [
					"protocolVersion",
					"connectionId",
					"credentialFormats"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatPayload_CredentialFormatType-Array.createOffer_": {
				"properties": {
					"indy": {
						"$ref": "#/components/schemas/AnonCredsOfferCredentialFormat"
					},
					"jsonld": {
						"$ref": "#/components/schemas/JsonLdCredentialDetailFormat"
					},
					"anoncreds": {
						"$ref": "#/components/schemas/AnonCredsOfferCredentialFormat"
					}
				},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"CreateOfferOobOptions": {
				"properties": {
					"protocolVersion": {
						"type": "string"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormatType-Array.createOffer_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					},
					"goalCode": {
						"type": "string"
					},
					"parentThreadId": {
						"type": "string"
					},
					"willConfirm": {
						"type": "boolean"
					},
					"label": {
						"type": "string"
					},
					"imageUrl": {
						"type": "string"
					},
					"recipientKey": {
						"type": "string"
					},
					"invitationDid": {
						"type": "string"
					}
				},
				"required": [
					"protocolVersion",
					"credentialFormats"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsAcceptOfferFormat": {
				"description": "This defines the module payload for calling CredentialsApi.acceptOffer. No options are available for this\nmethod, so it's an empty object",
				"properties": {
					"linkSecretId": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatPayload_CredentialFormats.acceptOffer_": {
				"properties": {
					"indy": {
						"$ref": "#/components/schemas/AnonCredsAcceptOfferFormat"
					},
					"jsonld": {
						"$ref": "#/components/schemas/EmptyObject"
					},
					"anoncreds": {
						"$ref": "#/components/schemas/AnonCredsAcceptOfferFormat"
					}
				},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"CredentialOfferOptions": {
				"properties": {
					"credentialRecordId": {
						"$ref": "#/components/schemas/RecordId"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormats.acceptOffer_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"credentialRecordId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AnonCredsAcceptRequestFormat": {
				"$ref": "#/components/schemas/Record_string.never_",
				"description": "This defines the module payload for calling CredentialsApi.acceptRequest. No options are available for this\nmethod, so it's an empty object"
			},
			"JsonLdAcceptRequestFormat": {
				"description": "Format for accepting a jsonld credential request. Optionally allows the verification\nmethod to use to sign the credential.",
				"properties": {
					"verificationMethod": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatPayload_CredentialFormats.acceptRequest_": {
				"properties": {
					"indy": {
						"$ref": "#/components/schemas/AnonCredsAcceptRequestFormat"
					},
					"jsonld": {
						"$ref": "#/components/schemas/JsonLdAcceptRequestFormat"
					},
					"anoncreds": {
						"$ref": "#/components/schemas/AnonCredsAcceptRequestFormat"
					}
				},
				"type": "object",
				"description": "Get the payload for a specific method from a list of CredentialFormat interfaces and a method"
			},
			"AcceptCredentialRequestOptions": {
				"properties": {
					"credentialRecordId": {
						"$ref": "#/components/schemas/RecordId"
					},
					"credentialFormats": {
						"$ref": "#/components/schemas/CredentialFormatPayload_CredentialFormats.acceptRequest_"
					},
					"autoAcceptCredential": {
						"$ref": "#/components/schemas/AutoAcceptCredential"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"credentialRecordId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AcceptCredential": {
				"properties": {
					"credentialRecordId": {
						"$ref": "#/components/schemas/RecordId"
					}
				},
				"required": [
					"credentialRecordId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialFormatDataMessagePayload__40_LegacyIndyCredentialFormat-or-JsonLdCredentialFormat-or-AnonCredsCredentialFormat_41_-Array.proposal_": {
				"properties": {},
				"type": "object",
				"description": "Get the format data payload for a specific message from a list of CredentialFormat interfaces and a message\n\nFor an indy offer, this resolves to the cred abstract format as defined here:\nhttps://github.com/hyperledger/aries-rfcs/tree/b3a3942ef052039e73cd23d847f42947f8287da2/features/0592-indy-attachments#cred-abstract-format"
			},
			"CredentialFormatDataMessagePayload__40_LegacyIndyCredentialFormat-or-JsonLdCredentialFormat-or-AnonCredsCredentialFormat_41_-Array.offer_": {
				"properties": {},
				"type": "object",
				"description": "Get the format data payload for a specific message from a list of CredentialFormat interfaces and a message\n\nFor an indy offer, this resolves to the cred abstract format as defined here:\nhttps://github.com/hyperledger/aries-rfcs/tree/b3a3942ef052039e73cd23d847f42947f8287da2/features/0592-indy-attachments#cred-abstract-format"
			},
			"CredentialFormatDataMessagePayload__40_LegacyIndyCredentialFormat-or-JsonLdCredentialFormat-or-AnonCredsCredentialFormat_41_-Array.request_": {
				"properties": {},
				"type": "object",
				"description": "Get the format data payload for a specific message from a list of CredentialFormat interfaces and a message\n\nFor an indy offer, this resolves to the cred abstract format as defined here:\nhttps://github.com/hyperledger/aries-rfcs/tree/b3a3942ef052039e73cd23d847f42947f8287da2/features/0592-indy-attachments#cred-abstract-format"
			},
			"CredentialFormatDataMessagePayload__40_LegacyIndyCredentialFormat-or-JsonLdCredentialFormat-or-AnonCredsCredentialFormat_41_-Array.credential_": {
				"properties": {},
				"type": "object",
				"description": "Get the format data payload for a specific message from a list of CredentialFormat interfaces and a message\n\nFor an indy offer, this resolves to the cred abstract format as defined here:\nhttps://github.com/hyperledger/aries-rfcs/tree/b3a3942ef052039e73cd23d847f42947f8287da2/features/0592-indy-attachments#cred-abstract-format"
			},
			"GetCredentialFormatDataReturn__40_LegacyIndyCredentialFormat-or-JsonLdCredentialFormat-or-AnonCredsCredentialFormat_41_-Array_": {
				"properties": {
					"credential": {
						"$ref": "#/components/schemas/CredentialFormatDataMessagePayload__40_LegacyIndyCredentialFormat-or-JsonLdCredentialFormat-or-AnonCredsCredentialFormat_41_-Array.credential_"
					},
					"request": {
						"$ref": "#/components/schemas/CredentialFormatDataMessagePayload__40_LegacyIndyCredentialFormat-or-JsonLdCredentialFormat-or-AnonCredsCredentialFormat_41_-Array.request_"
					},
					"offerAttributes": {
						"items": {
							"$ref": "#/components/schemas/CredentialPreviewAttributeOptions"
						},
						"type": "array"
					},
					"offer": {
						"$ref": "#/components/schemas/CredentialFormatDataMessagePayload__40_LegacyIndyCredentialFormat-or-JsonLdCredentialFormat-or-AnonCredsCredentialFormat_41_-Array.offer_"
					},
					"proposal": {
						"$ref": "#/components/schemas/CredentialFormatDataMessagePayload__40_LegacyIndyCredentialFormat-or-JsonLdCredentialFormat-or-AnonCredsCredentialFormat_41_-Array.proposal_"
					},
					"proposalAttributes": {
						"items": {
							"$ref": "#/components/schemas/CredentialPreviewAttributeOptions"
						},
						"type": "array"
					}
				},
				"type": "object",
				"description": "Get format data return value. Each key holds a mapping of credential format key to format data."
			},
			"DidExchangeState": {
				"description": "Connection states as defined in RFC 0023.",
				"enum": [
					"start",
					"invitation-sent",
					"invitation-received",
					"request-sent",
					"request-received",
					"response-sent",
					"response-received",
					"abandoned",
					"completed"
				],
				"type": "string"
			},
			"ConnectionRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"BasicMessageRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"Record_content.string_": {
				"properties": {
					"content": {
						"type": "string"
					}
				},
				"required": [
					"content"
				],
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"Pick_InitConfig.label_": {
				"properties": {
					"label": {
						"type": "string",
						"description": "Agent public endpoints, sorted by priority (higher priority first)"
					}
				},
				"required": [
					"label"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"KeyDerivationMethod": {
				"enum": [
					"ARGON2I_MOD",
					"ARGON2I_INT",
					"RAW"
				],
				"type": "string"
			},
			"Pick_WalletConfig.id-or-key-or-keyDerivationMethod_": {
				"properties": {
					"key": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"keyDerivationMethod": {
						"$ref": "#/components/schemas/KeyDerivationMethod"
					}
				},
				"required": [
					"key",
					"id"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"TenantConfig": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Pick_InitConfig.label_"
					},
					{
						"properties": {
							"walletConfig": {
								"$ref": "#/components/schemas/Pick_WalletConfig.id-or-key-or-keyDerivationMethod_"
							}
						},
						"required": [
							"walletConfig"
						],
						"type": "object"
					}
				]
			},
			"MetadataValue": {
				"$ref": "#/components/schemas/Record_string.any_"
			},
			"MetadataBase": {
				"properties": {},
				"additionalProperties": {
					"$ref": "#/components/schemas/MetadataValue"
				},
				"type": "object"
			},
			"Metadata____": {
				"description": "Metadata access class to get, set (create and update), add (append to a record) and delete metadata on any record.\n\nset will override the previous value if it already exists\n\nnote: To add persistence to these records, you have to update the record in the correct repository",
				"properties": {
					"data": {
						"$ref": "#/components/schemas/MetadataBase"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_CustomTenantConfig.Exclude_keyofCustomTenantConfig.walletConfig__": {
				"properties": {
					"label": {
						"type": "string",
						"description": "Agent public endpoints, sorted by priority (higher priority first)"
					},
					"connectionImageUrl": {
						"type": "string"
					}
				},
				"required": [
					"label"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_CustomTenantConfig.walletConfig_": {
				"$ref": "#/components/schemas/Pick_CustomTenantConfig.Exclude_keyofCustomTenantConfig.walletConfig__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateTenantOptions": {
				"properties": {
					"config": {
						"$ref": "#/components/schemas/Omit_CustomTenantConfig.walletConfig_"
					}
				},
				"required": [
					"config"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OpenId4VcIssuanceSessionRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"Record_string.boolean_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"Record_string.boolean-or-Record_string.boolean__": {
				"properties": {},
				"additionalProperties": {
					"anyOf": [
						{
							"type": "boolean"
						},
						{
							"$ref": "#/components/schemas/Record_string.boolean_"
						}
					]
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"OpenId4VciCredentialFormatProfile": {
				"enum": [
					"jwt_vc_json",
					"jwt_vc_json-ld",
					"ldp_vc",
					"vc+sd-jwt",
					"mso_mdoc"
				],
				"type": "string"
			},
			"SignerMethod": {
				"enum": [
					"did",
					"x5c"
				],
				"type": "string"
			},
			"OpenId4VciOfferSdJwtCredential": {
				"properties": {
					"credentialSupportedId": {
						"type": "string"
					},
					"format": {
						"$ref": "#/components/schemas/OpenId4VciCredentialFormatProfile"
					},
					"signerOptions": {
						"properties": {
							"x5c": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"did": {
								"type": "string"
							},
							"method": {
								"$ref": "#/components/schemas/SignerMethod"
							}
						},
						"required": [
							"method"
						],
						"type": "object"
					},
					"payload": {
						"properties": {
							"vct": {
								"type": "string"
							}
						},
						"additionalProperties": {},
						"type": "object"
					},
					"disclosureFrame": {
						"$ref": "#/components/schemas/Record_string.boolean-or-Record_string.boolean__"
					}
				},
				"required": [
					"credentialSupportedId",
					"format",
					"signerOptions",
					"payload"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_ValidityInfo_": {
				"properties": {
					"signed": {
						"type": "string",
						"format": "date-time"
					},
					"validFrom": {
						"type": "string",
						"format": "date-time"
					},
					"validUntil": {
						"type": "string",
						"format": "date-time"
					},
					"expectedUpdate": {
						"type": "string",
						"format": "date-time"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Record_string.Record_string.unknown__": {
				"properties": {},
				"additionalProperties": {
					"$ref": "#/components/schemas/Record_string.unknown_"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"MdocNameSpaces": {
				"$ref": "#/components/schemas/Record_string.Record_string.unknown__"
			},
			"OpenId4VciOfferMdocCredential": {
				"properties": {
					"credentialSupportedId": {
						"type": "string"
					},
					"format": {
						"$ref": "#/components/schemas/OpenId4VciCredentialFormatProfile"
					},
					"signerOptions": {
						"properties": {
							"x5c": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"did": {
								"type": "string"
							},
							"method": {
								"$ref": "#/components/schemas/SignerMethod"
							}
						},
						"required": [
							"method"
						],
						"type": "object"
					},
					"payload": {
						"properties": {
							"namespaces": {
								"$ref": "#/components/schemas/MdocNameSpaces"
							},
							"validityInfo": {
								"$ref": "#/components/schemas/Partial_ValidityInfo_"
							},
							"docType": {
								"anyOf": [
									{
										"allOf": [
											{
												"type": "string"
											},
											{
												"properties": {},
												"type": "object"
											}
										]
									},
									{
										"type": "string",
										"enum": [
											"org.iso.18013.5.1.mDL"
										]
									}
								]
							}
						},
						"required": [
							"namespaces",
							"docType"
						],
						"type": "object"
					}
				},
				"required": [
					"credentialSupportedId",
					"format",
					"signerOptions",
					"payload"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OpenId4VciOfferW3cCredential": {
				"properties": {
					"credentialSupportedId": {
						"type": "string"
					},
					"format": {
						"$ref": "#/components/schemas/OpenId4VciCredentialFormatProfile"
					},
					"signerOptions": {
						"properties": {
							"x5c": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"did": {
								"type": "string"
							},
							"method": {
								"$ref": "#/components/schemas/SignerMethod"
							}
						},
						"required": [
							"method"
						],
						"type": "object"
					},
					"payload": {
						"properties": {
							"credential": {
								"$ref": "#/components/schemas/W3cCredential"
							},
							"verificationMethod": {
								"type": "string"
							}
						},
						"required": [
							"credential",
							"verificationMethod"
						],
						"type": "object"
					}
				},
				"required": [
					"credentialSupportedId",
					"format",
					"signerOptions",
					"payload"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OpenId4VcIssuanceSessionsCreateOffer": {
				"properties": {
					"publicIssuerId": {
						"type": "string"
					},
					"credentials": {
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/OpenId4VciOfferSdJwtCredential"
								},
								{
									"$ref": "#/components/schemas/OpenId4VciOfferMdocCredential"
								},
								{
									"$ref": "#/components/schemas/OpenId4VciOfferW3cCredential"
								}
							]
						},
						"type": "array"
					},
					"authorizationCodeFlowConfig": {
						"properties": {
							"issuerState": {
								"type": "string"
							},
							"requirePresentationDuringIssuance": {
								"type": "boolean"
							},
							"authorizationServerUrl": {
								"type": "string"
							}
						},
						"required": [
							"authorizationServerUrl"
						],
						"type": "object"
					},
					"preAuthorizedCodeFlowConfig": {
						"properties": {
							"authorizationServerUrl": {
								"type": "string"
							},
							"txCode": {
								"properties": {
									"input_mode": {
										"type": "string",
										"enum": [
											"numeric",
											"text"
										]
									},
									"length": {
										"type": "number",
										"format": "double"
									},
									"description": {
										"type": "string"
									}
								},
								"type": "object"
							},
							"preAuthorizedCode": {
								"type": "string"
							}
						},
						"required": [
							"authorizationServerUrl"
						],
						"type": "object"
					},
					"issuanceMetadata": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					}
				},
				"required": [
					"publicIssuerId",
					"credentials"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OpenId4VcIssuanceSessionState": {
				"enum": [
					"OfferCreated",
					"OfferUriRetrieved",
					"AuthorizationInitiated",
					"AuthorizationGranted",
					"AccessTokenRequested",
					"AccessTokenCreated",
					"CredentialRequestReceived",
					"CredentialsPartiallyIssued",
					"Completed",
					"Error"
				],
				"type": "string"
			},
			"SdJwtVcRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"MdocRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"AuthorizeRequestCredentialOffer": {
				"properties": {
					"credentialOfferUri": {
						"type": "string"
					},
					"credentialsToRequest": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"credentialOfferUri",
					"credentialsToRequest"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RequestCredentialBody": {
				"properties": {
					"credentialOfferUri": {
						"type": "string"
					},
					"credentialsToRequest": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"authorizationCode": {
						"type": "string"
					},
					"codeVerifier": {
						"type": "string"
					},
					"txCode": {
						"type": "string"
					}
				},
				"required": [
					"credentialOfferUri",
					"credentialsToRequest"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResolveProofRequest": {
				"properties": {
					"proofRequestUri": {
						"type": "string"
					}
				},
				"required": [
					"proofRequestUri"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OpenId4VcIssuerRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_",
				"description": "For OID4VC you need to expose metadata files. Each issuer needs to host this metadata. This is not the case for DIDComm where we can just have one /didcomm endpoint.\nSo we create a record per openid issuer/verifier that you want, and each tenant can create multiple issuers/verifiers which have different endpoints\nand metadata files"
			},
			"Logo": {
				"properties": {
					"uri": {
						"type": "string"
					},
					"alt_text": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": {}
			},
			"CredentialDisplay": {
				"properties": {
					"name": {
						"type": "string"
					},
					"locale": {
						"type": "string"
					},
					"logo": {
						"$ref": "#/components/schemas/Logo"
					}
				},
				"type": "object",
				"additionalProperties": {}
			},
			"AuthorizationServerClientAuth": {
				"properties": {
					"clientId": {
						"type": "string"
					},
					"clientSecret": {
						"type": "string"
					}
				},
				"required": [
					"clientId",
					"clientSecret"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AuthorizationServerConfig": {
				"properties": {
					"issuer": {
						"type": "string"
					},
					"clientAuthentication": {
						"$ref": "#/components/schemas/AuthorizationServerClientAuth"
					}
				},
				"required": [
					"issuer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ProofTypeConfig": {
				"properties": {
					"proof_signing_alg_values_supported": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"proof_signing_alg_values_supported"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.ProofTypeConfig_": {
				"properties": {},
				"additionalProperties": {
					"$ref": "#/components/schemas/ProofTypeConfig"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"CredentialDefinition": {
				"properties": {
					"type": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"CredentialConfigurationDisplay": {
				"properties": {
					"name": {
						"type": "string"
					},
					"locale": {
						"type": "string"
					},
					"logo": {
						"$ref": "#/components/schemas/Logo"
					},
					"description": {
						"type": "string"
					},
					"background_color": {
						"type": "string"
					},
					"background_image": {
						"$ref": "#/components/schemas/Logo"
					},
					"text_color": {
						"type": "string"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CredentialConfigurationSupportedWithFormats": {
				"properties": {
					"format": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "string",
								"enum": [
									"vc+sd-jwt",
									"mso_mdoc",
									"jwt_vc_json"
								]
							}
						]
					},
					"vct": {
						"type": "string"
					},
					"doctype": {
						"type": "string"
					},
					"scope": {
						"type": "string"
					},
					"claims": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					},
					"cryptographic_binding_methods_supported": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"credential_signing_alg_values_supported": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"proof_types_supported": {
						"$ref": "#/components/schemas/Record_string.ProofTypeConfig_"
					},
					"credential_definition": {
						"$ref": "#/components/schemas/CredentialDefinition"
					},
					"display": {
						"items": {
							"$ref": "#/components/schemas/CredentialConfigurationDisplay"
						},
						"type": "array"
					}
				},
				"required": [
					"format"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.CredentialConfigurationSupportedWithFormats_": {
				"properties": {},
				"additionalProperties": {
					"$ref": "#/components/schemas/CredentialConfigurationSupportedWithFormats"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"BatchCredentialIssuanceOptions": {
				"properties": {
					"batchSize": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"batchSize"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateIssuerOptions": {
				"properties": {
					"issuerId": {
						"type": "string"
					},
					"accessTokenSignerKeyType": {
						"type": "string"
					},
					"display": {
						"items": {
							"$ref": "#/components/schemas/CredentialDisplay"
						},
						"type": "array"
					},
					"authorizationServerConfigs": {
						"items": {
							"$ref": "#/components/schemas/AuthorizationServerConfig"
						},
						"type": "array"
					},
					"dpopSigningAlgValuesSupported": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"credentialConfigurationsSupported": {
						"$ref": "#/components/schemas/Record_string.CredentialConfigurationSupportedWithFormats_"
					},
					"batchCredentialIssuance": {
						"$ref": "#/components/schemas/BatchCredentialIssuanceOptions"
					}
				},
				"required": [
					"credentialConfigurationsSupported"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateIssuerRecordOptions": {
				"properties": {
					"display": {
						"items": {
							"$ref": "#/components/schemas/CredentialDisplay"
						},
						"type": "array"
					},
					"dpopSigningAlgValuesSupported": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"credentialConfigurationsSupported": {
						"$ref": "#/components/schemas/Record_string.CredentialConfigurationSupportedWithFormats_"
					},
					"batchCredentialIssuance": {
						"$ref": "#/components/schemas/BatchCredentialIssuanceOptions"
					}
				},
				"required": [
					"credentialConfigurationsSupported"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OpenId4VcVerificationSessionRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_"
			},
			"OpenId4VpCreateAuthorizationRequestReturn": {
				"properties": {
					"authorizationRequest": {
						"type": "string"
					},
					"verificationSession": {
						"$ref": "#/components/schemas/OpenId4VcVerificationSessionRecord"
					},
					"authorizationRequestObject": {}
				},
				"required": [
					"authorizationRequest",
					"verificationSession",
					"authorizationRequestObject"
				],
				"type": "object",
				"additionalProperties": false
			},
			"JwtObject": {
				"properties": {
					"alg": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"alg"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LdpObject": {
				"properties": {
					"proof_type": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"proof_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DiObject": {
				"properties": {
					"proof_type": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"cryptosuite": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"proof_type",
					"cryptosuite"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SdJwtObject": {
				"properties": {
					"undefined": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"MsoMdocObject": {
				"properties": {
					"alg": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"alg"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Format": {
				"properties": {
					"jwt": {
						"$ref": "#/components/schemas/JwtObject"
					},
					"jwt_vc": {
						"$ref": "#/components/schemas/JwtObject"
					},
					"jwt_vc_json": {
						"$ref": "#/components/schemas/JwtObject"
					},
					"jwt_vp": {
						"$ref": "#/components/schemas/JwtObject"
					},
					"jwt_vp_json": {
						"$ref": "#/components/schemas/JwtObject"
					},
					"ldp": {
						"$ref": "#/components/schemas/LdpObject"
					},
					"ldp_vc": {
						"$ref": "#/components/schemas/LdpObject"
					},
					"ldp_vp": {
						"$ref": "#/components/schemas/LdpObject"
					},
					"di": {
						"$ref": "#/components/schemas/DiObject"
					},
					"di_vc": {
						"$ref": "#/components/schemas/DiObject"
					},
					"di_vp": {
						"$ref": "#/components/schemas/DiObject"
					},
					"undefined": {
						"$ref": "#/components/schemas/SdJwtObject"
					},
					"mso_mdoc": {
						"$ref": "#/components/schemas/MsoMdocObject"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Issuance": {
				"properties": {
					"manifest": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": {}
			},
			"Optionality": {
				"type": "string",
				"enum": [
					"required",
					"preferred"
				]
			},
			"Directives": {
				"type": "string",
				"enum": [
					"required",
					"allowed",
					"disallowed"
				]
			},
			"PdStatus": {
				"properties": {
					"directive": {
						"$ref": "#/components/schemas/Directives"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Statuses": {
				"properties": {
					"active": {
						"$ref": "#/components/schemas/PdStatus"
					},
					"suspended": {
						"$ref": "#/components/schemas/PdStatus"
					},
					"revoked": {
						"$ref": "#/components/schemas/PdStatus"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"OneOfNumberStringBoolean": {
				"anyOf": [
					{
						"type": "boolean"
					},
					{
						"type": "number",
						"format": "double"
					},
					{
						"type": "string"
					}
				]
			},
			"OneOfNumberString": {
				"anyOf": [
					{
						"type": "number",
						"format": "double"
					},
					{
						"type": "string"
					}
				]
			},
			"FilterV2": {
				"properties": {
					"const": {
						"$ref": "#/components/schemas/OneOfNumberStringBoolean"
					},
					"enum": {
						"items": {
							"$ref": "#/components/schemas/OneOfNumberStringBoolean"
						},
						"type": "array"
					},
					"exclusiveMinimum": {
						"$ref": "#/components/schemas/OneOfNumberString"
					},
					"exclusiveMaximum": {
						"$ref": "#/components/schemas/OneOfNumberString"
					},
					"format": {
						"type": "string"
					},
					"formatMaximum": {
						"type": "string"
					},
					"formatMinimum": {
						"type": "string"
					},
					"formatExclusiveMaximum": {
						"type": "string"
					},
					"formatExclusiveMinimum": {
						"type": "string"
					},
					"minLength": {
						"type": "number",
						"format": "double"
					},
					"maxLength": {
						"type": "number",
						"format": "double"
					},
					"minimum": {
						"$ref": "#/components/schemas/OneOfNumberString"
					},
					"maximum": {
						"$ref": "#/components/schemas/OneOfNumberString"
					},
					"not": {
						"additionalProperties": false,
						"type": "object"
					},
					"pattern": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"contains": {
						"$ref": "#/components/schemas/FilterV2"
					},
					"items": {
						"$ref": "#/components/schemas/FilterV2Items"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"FilterV2Items": {
				"properties": {
					"const": {
						"$ref": "#/components/schemas/OneOfNumberStringBoolean"
					},
					"enum": {
						"items": {
							"$ref": "#/components/schemas/OneOfNumberStringBoolean"
						},
						"type": "array"
					},
					"exclusiveMinimum": {
						"$ref": "#/components/schemas/OneOfNumberString"
					},
					"exclusiveMaximum": {
						"$ref": "#/components/schemas/OneOfNumberString"
					},
					"format": {
						"type": "string"
					},
					"formatMaximum": {
						"type": "string"
					},
					"formatMinimum": {
						"type": "string"
					},
					"formatExclusiveMaximum": {
						"type": "string"
					},
					"formatExclusiveMinimum": {
						"type": "string"
					},
					"minLength": {
						"type": "number",
						"format": "double"
					},
					"maxLength": {
						"type": "number",
						"format": "double"
					},
					"minimum": {
						"$ref": "#/components/schemas/OneOfNumberString"
					},
					"maximum": {
						"$ref": "#/components/schemas/OneOfNumberString"
					},
					"not": {
						"additionalProperties": false,
						"type": "object"
					},
					"pattern": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"contains": {
						"$ref": "#/components/schemas/FilterV2"
					},
					"items": {
						"$ref": "#/components/schemas/FilterV2Items"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"FieldV2": {
				"properties": {
					"id": {
						"type": "string"
					},
					"path": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"purpose": {
						"type": "string"
					},
					"filter": {
						"$ref": "#/components/schemas/FilterV2"
					},
					"predicate": {
						"$ref": "#/components/schemas/Optionality"
					},
					"intent_to_retain": {
						"type": "boolean"
					},
					"name": {
						"type": "string"
					},
					"optional": {
						"type": "boolean"
					}
				},
				"required": [
					"path"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HolderSubject": {
				"properties": {
					"field_id": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"directive": {
						"$ref": "#/components/schemas/Optionality"
					}
				},
				"required": [
					"field_id",
					"directive"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ConstraintsV2": {
				"properties": {
					"limit_disclosure": {
						"$ref": "#/components/schemas/Optionality"
					},
					"statuses": {
						"$ref": "#/components/schemas/Statuses"
					},
					"fields": {
						"items": {
							"$ref": "#/components/schemas/FieldV2"
						},
						"type": "array"
					},
					"subject_is_issuer": {
						"$ref": "#/components/schemas/Optionality"
					},
					"is_holder": {
						"items": {
							"$ref": "#/components/schemas/HolderSubject"
						},
						"type": "array"
					},
					"same_subject": {
						"items": {
							"$ref": "#/components/schemas/HolderSubject"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"InputDescriptorV2Model": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"purpose": {
						"type": "string"
					},
					"format": {
						"$ref": "#/components/schemas/Format"
					},
					"group": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"issuance": {
						"items": {
							"$ref": "#/components/schemas/Issuance"
						},
						"type": "array"
					},
					"constraints": {
						"$ref": "#/components/schemas/ConstraintsV2"
					}
				},
				"required": [
					"id",
					"constraints"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Rules": {
				"type": "string",
				"enum": [
					"all",
					"pick"
				]
			},
			"SubmissionRequirement": {
				"properties": {
					"name": {
						"type": "string"
					},
					"purpose": {
						"type": "string"
					},
					"rule": {
						"$ref": "#/components/schemas/Rules"
					},
					"count": {
						"type": "number",
						"format": "double"
					},
					"min": {
						"type": "number",
						"format": "double"
					},
					"max": {
						"type": "number",
						"format": "double"
					},
					"from": {
						"type": "string"
					},
					"from_nested": {
						"items": {
							"$ref": "#/components/schemas/SubmissionRequirement"
						},
						"type": "array"
					}
				},
				"required": [
					"rule"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InputDescriptorV2": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"purpose": {
						"type": "string"
					},
					"format": {
						"$ref": "#/components/schemas/Format"
					},
					"group": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"issuance": {
						"items": {
							"$ref": "#/components/schemas/Issuance"
						},
						"type": "array"
					},
					"constraints": {
						"$ref": "#/components/schemas/ConstraintsV2"
					}
				},
				"required": [
					"id",
					"constraints"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PresentationDefinitionV2": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"purpose": {
						"type": "string"
					},
					"format": {
						"$ref": "#/components/schemas/Format"
					},
					"submission_requirements": {
						"items": {
							"$ref": "#/components/schemas/SubmissionRequirement"
						},
						"type": "array"
					},
					"input_descriptors": {
						"items": {
							"$ref": "#/components/schemas/InputDescriptorV2"
						},
						"type": "array"
					},
					"frame": {
						"additionalProperties": false,
						"type": "object"
					}
				},
				"required": [
					"id",
					"input_descriptors"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DifPresentationExchangeDefinitionV2Model": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"purpose": {
						"type": "string"
					},
					"format": {
						"$ref": "#/components/schemas/Format"
					},
					"submission_requirements": {
						"items": {},
						"type": "array"
					},
					"input_descriptors": {
						"items": {
							"$ref": "#/components/schemas/InputDescriptorV2Model"
						},
						"type": "array"
					},
					"frame": {
						"additionalProperties": false,
						"type": "object"
					}
				},
				"required": [
					"id",
					"input_descriptors"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PresentationDefinition": {
				"properties": {
					"definition": {
						"$ref": "#/components/schemas/DifPresentationExchangeDefinitionV2Model"
					}
				},
				"required": [
					"definition"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DcqlClaim": {
				"properties": {
					"path": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"intent_to_retain": {
						"type": "boolean"
					}
				},
				"required": [
					"path"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DcqlCredential": {
				"properties": {
					"id": {
						"type": "string"
					},
					"format": {
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Record_string.any_"
					},
					"require_cryptographic_holder_binding": {
						"type": "boolean"
					},
					"claims": {
						"items": {
							"$ref": "#/components/schemas/DcqlClaim"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"format",
					"claims"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DcqlQuery": {
				"properties": {
					"combine": {
						"type": "string",
						"enum": [
							"all",
							"any"
						]
					},
					"credentials": {
						"items": {
							"$ref": "#/components/schemas/DcqlCredential"
						},
						"type": "array"
					}
				},
				"required": [
					"credentials"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DcqlDefinition": {
				"properties": {
					"query": {
						"$ref": "#/components/schemas/DcqlQuery"
					}
				},
				"required": [
					"query"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResponseModeEnum": {
				"enum": [
					"direct_post",
					"direct_post.jwt"
				],
				"type": "string"
			},
			"CreateAuthorizationRequest": {
				"properties": {
					"verifierId": {
						"type": "string"
					},
					"verifierDid": {
						"type": "string"
					},
					"presentationExchange": {
						"$ref": "#/components/schemas/PresentationDefinition"
					},
					"dcql": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/DcqlDefinition"
							}
						]
					},
					"responseMode": {
						"$ref": "#/components/schemas/ResponseModeEnum"
					}
				},
				"required": [
					"verifierId",
					"verifierDid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OpenId4VcVerificationSessionState": {
				"enum": [
					"RequestCreated",
					"RequestUriRetrieved",
					"ResponseVerified",
					"Error"
				],
				"type": "string"
			},
			"OpenId4VcVerifierRecord": {
				"$ref": "#/components/schemas/Record_string.unknown_",
				"description": "For OID4VC you need to expos metadata files. Each issuer needs to host this metadata. This is not the case for DIDComm where we can just have one /didcomm endpoint.\nSo we create a record per openid issuer/verifier that you want, and each tenant can create multiple issuers/verifiers which have different endpoints\nand metadata files"
			},
			"OpenId4VcSiopVerifierClientMetadata": {
				"properties": {
					"client_name": {
						"type": "string"
					},
					"logo_uri": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"OpenId4VcSiopCreateVerifierOptions": {
				"properties": {
					"verifierId": {
						"type": "string"
					},
					"clientMetadata": {
						"$ref": "#/components/schemas/OpenId4VcSiopVerifierClientMetadata"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"OpenId4VcUpdateVerifierRecordOptions": {
				"properties": {
					"verifierId": {
						"type": "string"
					},
					"clientMetadata": {
						"$ref": "#/components/schemas/OpenId4VcSiopVerifierClientMetadata"
					}
				},
				"required": [
					"verifierId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BasicX509CreateCertificateConfig": {
				"properties": {
					"countryName": {
						"type": "string"
					},
					"stateOrProvinceName": {
						"type": "string"
					},
					"organizationalUnit": {
						"type": "string"
					},
					"commonName": {
						"type": "string"
					},
					"keyType": {
						"$ref": "#/components/schemas/KeyType"
					},
					"issuerAlternativeNameURL": {
						"type": "string"
					}
				},
				"required": [
					"keyType",
					"issuerAlternativeNameURL"
				],
				"type": "object",
				"additionalProperties": false
			},
			"X509ImportCertificateOptionsDto": {
				"properties": {
					"certificate": {
						"type": "string"
					},
					"privateKey": {
						"type": "string"
					},
					"keyType": {
						"$ref": "#/components/schemas/KeyType"
					}
				},
				"required": [
					"certificate",
					"keyType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"X509Certificate": {
				"properties": {
					"publicKey": {
						"$ref": "#/components/schemas/Key"
					},
					"privateKey": {
						"$ref": "#/components/schemas/Uint8Array"
					}
				},
				"required": [
					"publicKey"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"apiKey": {
				"type": "apiKey",
				"name": "Authorization",
				"in": "header"
			},
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "credo-controller",
		"version": "2.0.0",
		"description": "Rest endpoint wrapper for using your agent over HTTP",
		"license": {
			"name": "Apache-2.0"
		},
		"contact": {}
	},
	"paths": {
		"/x509": {
			"post": {
				"operationId": "CreateX509Certificate",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"publicCertificateBase64": {
											"type": "string"
										}
									},
									"required": [
										"publicCertificateBase64"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"x509"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/X509CreateCertificateOptionsDto"
							}
						}
					}
				}
			}
		},
		"/x509/import": {
			"post": {
				"operationId": "ImportX509Certificates",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"issuerCertficicate": {
											"type": "string"
										}
									},
									"required": [
										"issuerCertficicate"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"x509"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/X509ImportCertificateOptionsDto"
							}
						}
					}
				}
			}
		},
		"/x509/trusted": {
			"post": {
				"operationId": "AddTrustedCertificate",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"x509"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"certificate": {
										"type": "string"
									}
								},
								"required": [
									"certificate"
								],
								"type": "object"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetTrustedCertificates",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"x509"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": []
			}
		},
		"/x509/decode": {
			"post": {
				"operationId": "DecodeCertificate",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/X509Certificate"
								}
							}
						}
					}
				},
				"tags": [
					"x509"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"certificate": {
										"type": "string"
									}
								},
								"required": [
									"certificate"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/polygon/create-keys": {
			"post": {
				"operationId": "CreateKeyPair",
				"responses": {
					"200": {
						"description": "Secp256k1KeyPair",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"address": {
											"type": "string"
										},
										"publicKeyBase58": {
											"type": "string"
										},
										"privateKey": {
											"type": "string"
										}
									},
									"required": [
										"address",
										"publicKeyBase58",
										"privateKey"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Create Secp256k1 key pair for polygon DID",
				"tags": [
					"Polygon"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated",
							"Basewallet"
						]
					}
				],
				"parameters": []
			}
		},
		"/polygon/create-schema": {
			"post": {
				"operationId": "CreateSchema",
				"responses": {
					"200": {
						"description": "Schema JSON",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Create polygon based W3C schema",
				"tags": [
					"Polygon"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"schema": {
										"$ref": "#/components/schemas/Record_string.unknown_"
									},
									"schemaName": {
										"type": "string"
									},
									"did": {
										"type": "string"
									}
								},
								"required": [
									"schema",
									"schemaName",
									"did"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/polygon/estimate-transaction": {
			"post": {
				"operationId": "EstimateTransaction",
				"responses": {
					"200": {
						"description": "Transaction Object",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Estimate transaction",
				"tags": [
					"Polygon"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated",
							"Basewallet"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidOperationOptions"
							}
						}
					}
				}
			}
		},
		"/polygon/{did}/{schemaId}": {
			"get": {
				"operationId": "GetSchemaById",
				"responses": {
					"200": {
						"description": "Schema Object",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Fetch schema details",
				"tags": [
					"Polygon"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "did",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "schemaId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/anoncreds/transactions/endorse": {
			"post": {
				"operationId": "EndorserTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"signedTransaction": {
											"type": "string"
										}
									},
									"required": [
										"signedTransaction"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Anoncreds - EndorserTransaction"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EndorserTransaction"
							}
						}
					}
				}
			}
		},
		"/anoncreds/transactions/set-endorser-role": {
			"post": {
				"operationId": "DidNymTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DidCreateResult_DidOperationStateActionBase_"
								}
							}
						}
					}
				},
				"tags": [
					"Anoncreds - EndorserTransaction"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidNymTransaction"
							}
						}
					}
				}
			}
		},
		"/anoncreds/transactions/write": {
			"post": {
				"operationId": "WriteSchemaAndCredDefOnLedger",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/RegisterSchemaReturnStateWait"
										},
										{
											"$ref": "#/components/schemas/RegisterSchemaReturnStateAction"
										},
										{
											"$ref": "#/components/schemas/RegisterSchemaReturnStateFinished"
										},
										{
											"$ref": "#/components/schemas/RegisterSchemaReturnStateFailed"
										},
										{
											"$ref": "#/components/schemas/RegisterCredentialDefinitionReturnStateWait"
										},
										{
											"$ref": "#/components/schemas/RegisterCredentialDefinitionReturnStateAction"
										},
										{
											"$ref": "#/components/schemas/RegisterCredentialDefinitionReturnStateFinished"
										},
										{
											"$ref": "#/components/schemas/RegisterCredentialDefinitionReturnStateFailed"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Anoncreds - EndorserTransaction"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/WriteTransaction"
							}
						}
					}
				}
			}
		},
		"/dids/{did}": {
			"get": {
				"operationId": "GetDidRecordByDid",
				"responses": {
					"200": {
						"description": "DidResolutionResult",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"didDocumentMetadata": {
											"$ref": "#/components/schemas/DIDDocumentMetadata"
										},
										"didResolutionMetadata": {
											"$ref": "#/components/schemas/DidResolutionMetadata"
										},
										"didDocument": {
											"$ref": "#/components/schemas/Record_string.any_"
										}
									},
									"required": [
										"didDocumentMetadata",
										"didResolutionMetadata",
										"didDocument"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"didDocument": {
												"@context": [
													"https://w3id.org/did/v1",
													"https://w3id.org/security/suites/ed25519-2018/v1",
													"https://w3id.org/security/suites/x25519-2019/v1"
												],
												"id": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL",
												"verificationMethod": [
													{
														"id": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL",
														"type": "Ed25519VerificationKey2018",
														"controller": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL",
														"publicKeyBase58": "6fioC1zcDPyPEL19pXRS2E4iJ46zH7xP6uSgAaPdwDrx"
													}
												],
												"authentication": [
													"did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL"
												],
												"assertionMethod": [
													"did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL"
												],
												"capabilityInvocation": [
													"did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL"
												],
												"capabilityDelegation": [
													"did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL"
												],
												"keyAgreement": [
													{
														"id": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL#z6LSrdqo4M24WRDJj1h2hXxgtDTyzjjKCiyapYVgrhwZAySn",
														"type": "X25519KeyAgreementKey2019",
														"controller": "did:key:z6Mkk7yqnGF3YwTrLpqrW6PGsKci7dNqh1CjnvMbzrMerSeL",
														"publicKeyBase58": "FxfdY3DCQxVZddKGAtSjZdFW9bCCW7oRwZn1NFJ2Tbg2"
													}
												]
											},
											"didDocumentMetadata": {},
											"didResolutionMetadata": {
												"contentType": "application/did+ld+json"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Resolves did and returns did resolution result",
				"tags": [
					"Dids"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"description": "Decentralized Identifier",
						"in": "path",
						"name": "did",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Did"
						}
					}
				]
			}
		},
		"/dids/write": {
			"post": {
				"operationId": "WriteDid",
				"responses": {
					"200": {
						"description": "DidResolutionResult",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"did": "did:indy:bcovrin:testnet:LRCUFcizUL74AGgLqdJHK7",
											"didDocument": {
												"@context": [
													"https://w3id.org/did/v1",
													"https://w3id.org/security/suites/ed25519-2018/v1"
												],
												"id": "did:indy:bcovrin:testnet:LRCUFcizUL74AGgLqdJHK7",
												"verificationMethod": [
													{
														"id": "did:indy:bcovrin:testnet:LRCUFcizUL74AGgLqdJHK7#verkey",
														"type": "Ed25519VerificationKey2018",
														"controller": "did:indy:bcovrin:testnet:LRCUFcizUL74AGgLqdJHK7",
														"publicKeyBase58": "BapLDK4dEY88vWcQgNbpAPVVP4r3CHs4MvShmmhqkxXM"
													}
												],
												"authentication": [
													"did:indy:bcovrin:testnet:LRCUFcizUL74AGgLqdJHK7#verkey"
												]
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Did nym registration",
				"tags": [
					"Dids"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DidCreate"
							}
						}
					}
				}
			}
		},
		"/dids": {
			"get": {
				"operationId": "GetDids",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/DidRecord"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Dids"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": []
			}
		},
		"/anoncreds/schemas/{schemaId}": {
			"get": {
				"operationId": "GetSchemaById",
				"responses": {
					"200": {
						"description": "get schema by Id",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetSchemaReturn"
								},
								"examples": {
									"Example 1": {
										"value": {
											"ver": "1.0",
											"id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
											"name": "schema",
											"version": "1.0",
											"attrNames": [
												"string"
											],
											"seqNo": 351936
										}
									}
								}
							}
						}
					}
				},
				"description": "Get schema by schemaId",
				"tags": [
					"Anoncreds - Schemas"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "schemaId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/SchemaId"
						}
					}
				]
			}
		},
		"/anoncreds/schemas": {
			"post": {
				"operationId": "CreateSchema",
				"responses": {
					"200": {
						"description": "get schema",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/RegisterSchemaReturn"
										},
										{
											"$ref": "#/components/schemas/RegisterSchemaReturnStateFinished"
										}
									]
								},
								"examples": {
									"Example 1": {
										"value": {
											"state": "finished",
											"schema": {
												"issuerId": "did:indy:bcovrin:testnet:LRCUFcizUL74AGgLqdJHK7",
												"name": "Test Schema",
												"version": "1.0.0",
												"attrNames": [
													"Name",
													"Age"
												]
											},
											"schemaId": "LRCUFcizUL74AGgLqdJHK7:2:Test Schema:1.0.0"
										}
									}
								}
							}
						}
					}
				},
				"description": "Create schema",
				"tags": [
					"Anoncreds - Schemas"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateSchemaInput"
							}
						}
					}
				}
			}
		},
		"/anoncreds/credential-definitions/{credentialDefinitionId}": {
			"get": {
				"operationId": "GetCredentialDefinitionById",
				"responses": {
					"200": {
						"description": "CredDef",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetCredentialDefinitionReturn"
								},
								"examples": {
									"Example 1": {
										"value": {
											"ver": "1.0",
											"id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
											"schemaId": "351936",
											"type": "CL",
											"tag": "definition",
											"value": {
												"primary": {
													"n": "string",
													"s": "string",
													"r": {
														"master_secret": "string",
														"string": "string"
													},
													"rctxt": "string",
													"z": "string"
												},
												"revocation": {
													"g": "1 string",
													"g_dash": "string",
													"h": "string",
													"h0": "string",
													"h1": "string",
													"h2": "string",
													"htilde": "string",
													"h_cap": "string",
													"u": "string",
													"pk": "string",
													"y": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieve credential definition by credential definition id",
				"tags": [
					"Anoncreds - Credential Definitions"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "credentialDefinitionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/CredentialDefinitionId"
						}
					}
				]
			}
		},
		"/anoncreds/credential-definitions": {
			"post": {
				"operationId": "CreateCredentialDefinition",
				"responses": {
					"200": {
						"description": "CredDef",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/RegisterCredentialDefinitionReturn"
										},
										{
											"$ref": "#/components/schemas/RegisterCredentialDefinitionReturnStateFinished"
										}
									]
								},
								"examples": {
									"Example 1": {
										"value": {
											"ver": "1.0",
											"id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
											"schemaId": "351936",
											"type": "CL",
											"tag": "definition",
											"value": {
												"primary": {
													"n": "string",
													"s": "string",
													"r": {
														"master_secret": "string",
														"string": "string"
													},
													"rctxt": "string",
													"z": "string"
												},
												"revocation": {
													"g": "1 string",
													"g_dash": "string",
													"h": "string",
													"h0": "string",
													"h1": "string",
													"h2": "string",
													"htilde": "string",
													"h_cap": "string",
													"u": "string",
													"pk": "string",
													"y": "string"
												}
											}
										}
									}
								}
							}
						}
					},
					"202": {
						"description": "Wait for action to complete"
					}
				},
				"description": "Creates a new credential definition.",
				"tags": [
					"Anoncreds - Credential Definitions"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"endorserDid": {
										"type": "string"
									},
									"endorse": {
										"type": "boolean"
									},
									"tag": {
										"type": "string"
									},
									"schemaId": {
										"$ref": "#/components/schemas/SchemaId"
									},
									"issuerId": {
										"type": "string"
									}
								},
								"required": [
									"tag",
									"schemaId",
									"issuerId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/agent": {
			"get": {
				"operationId": "GetAgentInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AgentInfo"
								}
							}
						}
					}
				},
				"description": "Retrieve basic agent information",
				"tags": [
					"Agent"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated",
							"Basewallet"
						]
					}
				],
				"parameters": []
			}
		},
		"/agent/token": {
			"post": {
				"operationId": "GetAgentToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AgentToken"
								}
							}
						}
					}
				},
				"description": "Retrieve agent token",
				"tags": [
					"Agent"
				],
				"security": [
					{
						"apiKey": []
					}
				],
				"parameters": []
			}
		},
		"/agent/wallet": {
			"delete": {
				"operationId": "DeleteWallet",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Delete wallet",
				"tags": [
					"Agent"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": []
			}
		},
		"/agent/verify": {
			"post": {
				"operationId": "Verify",
				"responses": {
					"200": {
						"description": "isValidSignature - true if signature is valid, false otherwise",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"description": "Verify data using a key",
				"tags": [
					"Agent"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VerifyDataOptions"
							}
						}
					}
				}
			}
		},
		"/agent/credential/sign": {
			"post": {
				"operationId": "SignCredential",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/components/schemas/Record_string.any_"
										},
										{
											"$ref": "#/components/schemas/W3cCredentialRecord"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Agent"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "storeCredential",
						"required": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "dataTypeToSign",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"rawData",
								"jsonLd"
							]
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"anyOf": [
									{
										"$ref": "#/components/schemas/CustomW3cJsonLdSignCredentialOptions"
									},
									{
										"$ref": "#/components/schemas/SignDataOptions"
									},
									{}
								]
							}
						}
					}
				}
			}
		},
		"/agent/credential/verify": {
			"post": {
				"operationId": "VerifyCredential",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/W3cVerifyCredentialResult"
								}
							}
						}
					}
				},
				"tags": [
					"Agent"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"anyOf": [
									{
										"$ref": "#/components/schemas/SafeW3cJsonLdVerifyCredentialOptions"
									},
									{}
								]
							}
						}
					}
				}
			}
		},
		"/didcomm/question-answer": {
			"get": {
				"operationId": "GetQuestionAnswerRecords",
				"responses": {
					"200": {
						"description": "QuestionAnswerRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Record_string.unknown_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieve question and answer records by query",
				"tags": [
					"DIDComm - Question Answer"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "query",
						"name": "connectionId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Role of the question",
						"in": "query",
						"name": "role",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/QuestionAnswerRole"
						}
					},
					{
						"description": "State of the question",
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/QuestionAnswerState"
						}
					},
					{
						"description": "Thread identifier",
						"in": "query",
						"name": "threadId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/didcomm/question-answer/question/{connectionId}": {
			"post": {
				"operationId": "SendQuestion",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Record_string.unknown_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Send a question to a connection",
				"tags": [
					"DIDComm - Question Answer"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"detail": {
										"type": "string"
									},
									"validResponses": {
										"items": {
											"$ref": "#/components/schemas/ValidResponse"
										},
										"type": "array"
									},
									"question": {
										"type": "string"
									}
								},
								"required": [
									"validResponses",
									"question"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/didcomm/question-answer/answer/{id}": {
			"post": {
				"operationId": "SendAnswer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Record_string.unknown_"
								}
							}
						}
					}
				},
				"description": "Send a answer to question",
				"tags": [
					"DIDComm - Question Answer"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"description": "The id of the question answer record",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Record_response.string_"
							}
						}
					}
				}
			}
		},
		"/didcomm/question-answer/{id}": {
			"get": {
				"operationId": "GetQuestionAnswerRecordById",
				"responses": {
					"200": {
						"description": "ConnectionRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Record_string.unknown_"
								}
							}
						}
					}
				},
				"description": "Retrieve question answer record by id",
				"tags": [
					"DIDComm - Question Answer"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/didcomm/proofs": {
			"get": {
				"operationId": "GetAllProofs",
				"responses": {
					"200": {
						"description": "ProofRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Record_string.unknown_"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": [
											{
												"metadata": {},
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
												"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
												"protocolVersion": "v1"
											}
										]
									}
								}
							}
						}
					}
				},
				"description": "Retrieve all proof records",
				"tags": [
					"DIDComm - Proofs"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "threadId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/didcomm/proofs/{proofRecordId}": {
			"get": {
				"operationId": "GetProofById",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Record_string.unknown_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieve proof record by proof record id",
				"tags": [
					"DIDComm - Proofs"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/didcomm/proofs/propose-proof": {
			"post": {
				"operationId": "ProposeProof",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProofExchangeRecord"
								},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Initiate a new presentation exchange as prover by sending a presentation proposal request\nto the connection with the specified connection id.",
				"tags": [
					"DIDComm - Proofs"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RequestProofProposalOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/proofs/{proofRecordId}/accept-proposal": {
			"post": {
				"operationId": "AcceptProposal",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProofExchangeRecord"
								},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a presentation proposal as verifier by sending an accept proposal message\nto the connection associated with the proof record.",
				"tags": [
					"DIDComm - Proofs"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptProofProposal"
							}
						}
					}
				}
			}
		},
		"/didcomm/proofs/request-proof": {
			"post": {
				"operationId": "RequestProof",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProofExchangeRecord"
								},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Creates a presentation request bound to existing connection",
				"tags": [
					"DIDComm - Proofs"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RequestProofOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/proofs/create-request-oob": {
			"post": {
				"operationId": "CreateRequest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"proofMessageId": {
											"type": "string"
										},
										"proofRecordThId": {
											"type": "string"
										},
										"invitationDid": {
											"type": "string"
										},
										"outOfBandRecord": {
											"$ref": "#/components/schemas/Record_string.unknown_"
										},
										"invitation": {
											"$ref": "#/components/schemas/PlaintextMessage"
										},
										"invitationUrl": {
											"type": "string"
										}
									},
									"required": [
										"proofMessageId",
										"proofRecordThId",
										"invitationDid",
										"outOfBandRecord",
										"invitation",
										"invitationUrl"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Creates a presentation request not bound to any proposal or existing connection",
				"tags": [
					"DIDComm - Proofs"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateProofRequestOobOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/proofs/{proofRecordId}/accept-request": {
			"post": {
				"operationId": "AcceptRequest",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Record_string.unknown_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a presentation request as prover by sending an accept request message\nto the connection associated with the proof record.",
				"tags": [
					"DIDComm - Proofs"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"comment": {
										"type": "string"
									},
									"filterByNonRevocationRequirements": {
										"type": "boolean"
									},
									"filterByPresentationPreview": {
										"type": "boolean"
									}
								},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/didcomm/proofs/{proofRecordId}/accept-presentation": {
			"post": {
				"operationId": "AcceptPresentation",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProofExchangeRecord"
								},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a presentation as prover by sending an accept presentation message\nto the connection associated with the proof record.",
				"tags": [
					"DIDComm - Proofs"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/didcomm/proofs/{proofRecordId}/form-data": {
			"get": {
				"operationId": "ProofFormData",
				"responses": {
					"200": {
						"description": "ProofRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetProofFormatDataReturn__40_LegacyIndyProofFormat-or-AnonCredsProofFormat-or-DifPresentationExchangeProofFormat_41_-Array_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834",
											"threadId": "0019d466-5eea-4269-8c40-031b4896c5b7",
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Return proofRecord",
				"tags": [
					"DIDComm - Proofs"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "proofRecordId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/didcomm/oob": {
			"get": {
				"operationId": "GetAllOutOfBandRecords",
				"responses": {
					"200": {
						"description": "OutOfBandRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Record_string.unknown_"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": [
											{
												"_tags": {
													"invitationId": "1cbd22e4-1906-41e9-8807-83d84437f978",
													"state": "await-response",
													"role": "sender",
													"recipientKeyFingerprints": [
														"z6MktUCPZjfRJXD4GMcYuXiqX2qZ8vBw6UAYpDFiHEUfwuLj"
													]
												},
												"outOfBandInvitation": {
													"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"metadata": {},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"reusable": false
											}
										]
									}
								}
							}
						}
					}
				},
				"description": "Retrieve all out of band records",
				"tags": [
					"DIDComm - Out Of Band"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"description": "invitation identifier",
						"in": "query",
						"name": "invitationId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/didcomm/oob/{outOfBandId}": {
			"get": {
				"operationId": "GetOutOfBandRecordById",
				"responses": {
					"200": {
						"description": "OutOfBandRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Record_string.unknown_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"invitationId": "1cbd22e4-1906-41e9-8807-83d84437f978",
												"state": "await-response",
												"role": "sender",
												"recipientKeyFingerprints": [
													"z6MktUCPZjfRJXD4GMcYuXiqX2qZ8vBw6UAYpDFiHEUfwuLj"
												]
											},
											"outOfBandInvitation": {
												"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
												"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
												"label": "Aries Test Agent",
												"accept": [
													"didcomm/aip1",
													"didcomm/aip2;env=rfc19"
												],
												"handshake_protocols": [
													"https://didcomm.org/didexchange/1.0",
													"https://didcomm.org/connections/1.0"
												],
												"services": [
													{
														"id": "#inline-0",
														"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
														"type": "did-communication",
														"recipientKeys": [
															"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
														],
														"routingKeys": []
													}
												]
											},
											"metadata": {},
											"id": "42a95528-0e30-4f86-a462-0efb02178b53",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"reusable": false
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieve an out of band record by id",
				"tags": [
					"DIDComm - Out Of Band"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "outOfBandId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteOutOfBandRecord",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Deletes an out of band record from the repository.",
				"tags": [
					"DIDComm - Out Of Band"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"description": "Record identifier",
						"in": "path",
						"name": "outOfBandId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/didcomm/oob/create-invitation": {
			"post": {
				"operationId": "CreateInvitation",
				"responses": {
					"200": {
						"description": "Out of band record",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"invitationDid": {
											"type": "string"
										},
										"outOfBandRecord": {
											"$ref": "#/components/schemas/Record_string.unknown_"
										},
										"invitation": {
											"$ref": "#/components/schemas/PlaintextMessage"
										},
										"invitationUrl": {
											"type": "string"
										}
									},
									"required": [
										"invitationDid",
										"outOfBandRecord",
										"invitation",
										"invitationUrl"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"invitationUrl": "string",
											"invitation": {
												"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
												"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
												"label": "Aries Test Agent",
												"accept": [
													"didcomm/aip1",
													"didcomm/aip2;env=rfc19"
												],
												"handshake_protocols": [
													"https://didcomm.org/didexchange/1.0",
													"https://didcomm.org/connections/1.0"
												],
												"services": [
													{
														"id": "#inline-0",
														"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
														"type": "did-communication",
														"recipientKeys": [
															"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
														],
														"routingKeys": []
													}
												]
											},
											"outOfBandRecord": {
												"_tags": {
													"invitationId": "1cbd22e4-1906-41e9-8807-83d84437f978",
													"state": "await-response",
													"role": "sender",
													"recipientKeyFingerprints": [
														"z6MktUCPZjfRJXD4GMcYuXiqX2qZ8vBw6UAYpDFiHEUfwuLj"
													]
												},
												"outOfBandInvitation": {
													"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"metadata": {},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"reusable": false
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Creates an outbound out-of-band record containing out-of-band invitation message defined in\nAries RFC 0434: Out-of-Band Protocol 1.1.",
				"tags": [
					"DIDComm - Out Of Band"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "configuration of how out-of-band invitation should be created",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"$ref": "#/components/schemas/CreateInvitationOptions"
									},
									{
										"$ref": "#/components/schemas/RecipientKeyOption"
									}
								],
								"description": "configuration of how out-of-band invitation should be created"
							}
						}
					}
				}
			}
		},
		"/didcomm/oob/create-legacy-invitation": {
			"post": {
				"operationId": "CreateLegacyInvitation",
				"responses": {
					"200": {
						"description": "out-of-band record and invitation",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"outOfBandRecord": {
											"$ref": "#/components/schemas/Record_string.unknown_"
										},
										"invitation": {
											"$ref": "#/components/schemas/PlaintextMessage"
										},
										"invitationUrl": {
											"type": "string"
										},
										"recipientKey": {
											"type": "string"
										}
									},
									"required": [
										"outOfBandRecord",
										"invitation",
										"invitationUrl"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"invitation": {
												"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
												"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
												"label": "Aries Test Agent",
												"accept": [
													"didcomm/aip1",
													"didcomm/aip2;env=rfc19"
												],
												"handshake_protocols": [
													"https://didcomm.org/didexchange/1.0",
													"https://didcomm.org/connections/1.0"
												],
												"services": [
													{
														"id": "#inline-0",
														"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
														"type": "did-communication",
														"recipientKeys": [
															"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
														],
														"routingKeys": []
													}
												]
											},
											"outOfBandRecord": {
												"_tags": {
													"invitationId": "1cbd22e4-1906-41e9-8807-83d84437f978",
													"state": "await-response",
													"role": "sender",
													"recipientKeyFingerprints": [
														"z6MktUCPZjfRJXD4GMcYuXiqX2qZ8vBw6UAYpDFiHEUfwuLj"
													]
												},
												"outOfBandInvitation": {
													"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"metadata": {},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"reusable": false
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Creates an outbound out-of-band record in the same way how `createInvitation` method does it,\nbut it also converts out-of-band invitation message to an \"legacy\" invitation message defined\nin RFC 0160: Connection Protocol and returns it together with out-of-band record.",
				"tags": [
					"DIDComm - Out Of Band"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "configuration of how a invitation should be created",
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"$ref": "#/components/schemas/Omit_CreateLegacyInvitationConfig.routing_"
									},
									{
										"$ref": "#/components/schemas/RecipientKeyOption"
									}
								],
								"description": "configuration of how a invitation should be created"
							}
						}
					}
				}
			}
		},
		"/didcomm/oob/create-legacy-connectionless-invitation": {
			"post": {
				"operationId": "CreateLegacyConnectionlessInvitation",
				"responses": {
					"200": {
						"description": "a message and a invitationUrl",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"outOfBandRecord": {
											"$ref": "#/components/schemas/OutOfBandRecord"
										},
										"invitationUrl": {
											"type": "string"
										},
										"message": {
											"$ref": "#/components/schemas/AgentMessage"
										}
									},
									"required": [
										"outOfBandRecord",
										"invitationUrl",
										"message"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"message": {
												"@id": "eac4ff4e-b4fb-4c1d-aef3-b29c89d1cc00",
												"@type": "https://didcomm.org/connections/1.0/invitation"
											},
											"invitationUrl": "http://example.com/invitation_url"
										}
									}
								}
							}
						}
					}
				},
				"description": "Creates a new connectionless legacy invitation.",
				"tags": [
					"DIDComm - Out Of Band"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "configuration of how a connection invitation should be created",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"routing": {
										"$ref": "#/components/schemas/Routing"
									},
									"domain": {
										"type": "string"
									},
									"message": {
										"$ref": "#/components/schemas/Record_string.unknown_"
									},
									"recordId": {
										"type": "string"
									}
								},
								"required": [
									"domain",
									"message",
									"recordId"
								],
								"type": "object",
								"description": "configuration of how a connection invitation should be created"
							}
						}
					}
				}
			}
		},
		"/didcomm/oob/receive-invitation": {
			"post": {
				"operationId": "ReceiveInvitation",
				"responses": {
					"200": {
						"description": "out-of-band record and connection record if one has been created.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"connectionRecord": {
											"$ref": "#/components/schemas/Record_string.unknown_"
										},
										"outOfBandRecord": {
											"$ref": "#/components/schemas/Record_string.unknown_"
										}
									},
									"required": [
										"connectionRecord",
										"outOfBandRecord"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"outOfBandRecord": {
												"_tags": {
													"invitationId": "1cbd22e4-1906-41e9-8807-83d84437f978",
													"state": "await-response",
													"role": "sender",
													"recipientKeyFingerprints": [
														"z6MktUCPZjfRJXD4GMcYuXiqX2qZ8vBw6UAYpDFiHEUfwuLj"
													]
												},
												"outOfBandInvitation": {
													"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"metadata": {},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"reusable": false
											},
											"connectionRecord": {
												"_tags": {
													"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
													"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
													"invitationKey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz",
													"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d",
													"verkey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz"
												},
												"metadata": {},
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Creates inbound out-of-band record and assigns out-of-band invitation message to it if the\nmessage is valid.",
				"tags": [
					"DIDComm - Out Of Band"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ReceiveInvitationProps"
							}
						}
					}
				}
			}
		},
		"/didcomm/oob/receive-invitation-url": {
			"post": {
				"operationId": "ReceiveInvitationFromUrl",
				"responses": {
					"200": {
						"description": "out-of-band record and connection record if one has been created.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"connectionRecord": {
											"$ref": "#/components/schemas/Record_string.unknown_"
										},
										"outOfBandRecord": {
											"$ref": "#/components/schemas/Record_string.unknown_"
										}
									},
									"required": [
										"connectionRecord",
										"outOfBandRecord"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"outOfBandRecord": {
												"_tags": {
													"invitationId": "1cbd22e4-1906-41e9-8807-83d84437f978",
													"state": "await-response",
													"role": "sender",
													"recipientKeyFingerprints": [
														"z6MktUCPZjfRJXD4GMcYuXiqX2qZ8vBw6UAYpDFiHEUfwuLj"
													]
												},
												"outOfBandInvitation": {
													"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"metadata": {},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"reusable": false
											},
											"connectionRecord": {
												"_tags": {
													"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
													"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
													"invitationKey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz",
													"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d",
													"verkey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz"
												},
												"metadata": {},
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Creates inbound out-of-band record and assigns out-of-band invitation message to it if the\nmessage is valid.",
				"tags": [
					"DIDComm - Out Of Band"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ReceiveInvitationByUrlProps"
							}
						}
					}
				}
			}
		},
		"/didcomm/oob/{outOfBandId}/accept-invitation": {
			"post": {
				"operationId": "AcceptInvitation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"connectionRecord": {
											"$ref": "#/components/schemas/Record_string.unknown_"
										},
										"outOfBandRecord": {
											"$ref": "#/components/schemas/Record_string.unknown_"
										}
									},
									"required": [
										"connectionRecord",
										"outOfBandRecord"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"outOfBandRecord": {
												"_tags": {
													"invitationId": "1cbd22e4-1906-41e9-8807-83d84437f978",
													"state": "await-response",
													"role": "sender",
													"recipientKeyFingerprints": [
														"z6MktUCPZjfRJXD4GMcYuXiqX2qZ8vBw6UAYpDFiHEUfwuLj"
													]
												},
												"outOfBandInvitation": {
													"@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/out-of-band/1.1/invitation",
													"@id": "d6472943-e5d0-4d95-8b48-790ed5a41931",
													"label": "Aries Test Agent",
													"accept": [
														"didcomm/aip1",
														"didcomm/aip2;env=rfc19"
													],
													"handshake_protocols": [
														"https://didcomm.org/didexchange/1.0",
														"https://didcomm.org/connections/1.0"
													],
													"services": [
														{
															"id": "#inline-0",
															"serviceEndpoint": "https://6b77-89-20-162-146.ngrok.io",
															"type": "did-communication",
															"recipientKeys": [
																"did:key:z6MkmTBHTWrvLPN8pBmUj7Ye5ww9GiacXCYMNVvpScSpf1DM"
															],
															"routingKeys": []
														}
													]
												},
												"metadata": {},
												"id": "42a95528-0e30-4f86-a462-0efb02178b53",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"reusable": false
											},
											"connectionRecord": {
												"_tags": {
													"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
													"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
													"invitationKey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz",
													"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d",
													"verkey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz"
												},
												"metadata": {},
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a connection invitation as invitee (by sending a connection request message) for the connection with the specified connection id.\nThis is not needed when auto accepting of connections is enabled.",
				"tags": [
					"DIDComm - Out Of Band"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "outOfBandId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptInvitationConfig"
							}
						}
					}
				}
			}
		},
		"/didcomm/credentials": {
			"get": {
				"operationId": "GetAllCredentials",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Record_string.unknown_"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": [
											{
												"_tags": {
													"state": "offer-sent",
													"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
													"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b"
												},
												"metadata": {
													"_internal/indyCredential": {
														"credentialDefinitionId": "q7ATwTYbQDgiigVijUAej:3:CL:318187:latest",
														"schemaId": "q7ATwTYbQDgiigVijUAej:2:Employee Badge:1.0"
													}
												},
												"credentials": [],
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"credentialAttributes": [],
												"protocolVersion": "v1"
											}
										]
									}
								}
							}
						}
					}
				},
				"description": "Retrieve all credential exchange records",
				"tags": [
					"DIDComm - Credentials"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "threadId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/ThreadId"
						}
					},
					{
						"in": "query",
						"name": "parentThreadId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/ThreadId"
						}
					},
					{
						"in": "query",
						"name": "connectionId",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					},
					{
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/CredentialState"
						}
					},
					{
						"in": "query",
						"name": "role",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/CredentialRole"
						}
					}
				]
			}
		},
		"/didcomm/credentials/w3c": {
			"get": {
				"operationId": "GetAllW3c",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/W3cCredentialRecord"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"DIDComm - Credentials"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": []
			}
		},
		"/didcomm/credentials/w3c/{id}": {
			"get": {
				"operationId": "GetW3cById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/W3cCredentialRecord"
								}
							}
						}
					}
				},
				"tags": [
					"DIDComm - Credentials"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/didcomm/credentials/{credentialRecordId}": {
			"get": {
				"operationId": "GetCredentialById",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Record_string.unknown_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"state": "offer-sent",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b"
											},
											"metadata": {
												"_internal/indyCredential": {
													"credentialDefinitionId": "q7ATwTYbQDgiigVijUAej:3:CL:318187:latest",
													"schemaId": "q7ATwTYbQDgiigVijUAej:2:Employee Badge:1.0"
												}
											},
											"credentials": [],
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieve credential exchange record by credential record id",
				"tags": [
					"DIDComm - Credentials"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "credentialRecordId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/didcomm/credentials/propose-credential": {
			"post": {
				"operationId": "ProposeCredential",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CredentialExchangeRecord"
								},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"state": "offer-sent",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b"
											},
											"metadata": {
												"_internal/indyCredential": {
													"credentialDefinitionId": "q7ATwTYbQDgiigVijUAej:3:CL:318187:latest",
													"schemaId": "q7ATwTYbQDgiigVijUAej:2:Employee Badge:1.0"
												}
											},
											"credentials": [],
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Initiate a new credential exchange as holder by sending a propose credential message\nto the connection with a specified connection id.",
				"tags": [
					"DIDComm - Credentials"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProposeCredentialOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/credentials/accept-proposal": {
			"post": {
				"operationId": "AcceptProposal",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CredentialExchangeRecord"
								},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"state": "offer-sent",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b"
											},
											"metadata": {
												"_internal/indyCredential": {
													"credentialDefinitionId": "q7ATwTYbQDgiigVijUAej:3:CL:318187:latest",
													"schemaId": "q7ATwTYbQDgiigVijUAej:2:Employee Badge:1.0"
												}
											},
											"credentials": [],
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a credential proposal as issuer by sending an accept proposal message\nto the connection associated with the credential exchange record.",
				"tags": [
					"DIDComm - Credentials"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptCredentialProposalOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/credentials/create-offer": {
			"post": {
				"operationId": "CreateOffer",
				"responses": {
					"200": {
						"description": "AgentMessage, CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CredentialExchangeRecord"
								},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"state": "offer-sent",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b"
											},
											"metadata": {
												"_internal/indyCredential": {
													"credentialDefinitionId": "q7ATwTYbQDgiigVijUAej:3:CL:318187:latest",
													"schemaId": "q7ATwTYbQDgiigVijUAej:2:Employee Badge:1.0"
												}
											},
											"credentials": [],
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Initiate a new credential exchange as issuer by creating a credential offer\nwithout specifying a connection id",
				"tags": [
					"DIDComm - Credentials"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOfferOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/credentials/create-offer-oob": {
			"post": {
				"operationId": "CreateOfferOob",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"invitationDid": {
											"type": "string"
										},
										"credentialRequestThId": {
											"type": "string"
										},
										"outOfBandRecordId": {
											"type": "string"
										},
										"outOfBandRecord": {
											"$ref": "#/components/schemas/Record_string.unknown_"
										},
										"invitation": {
											"$ref": "#/components/schemas/PlaintextMessage"
										},
										"invitationUrl": {
											"type": "string"
										}
									},
									"required": [
										"invitationDid",
										"credentialRequestThId",
										"outOfBandRecordId",
										"outOfBandRecord",
										"invitation",
										"invitationUrl"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"DIDComm - Credentials"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOfferOobOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/credentials/accept-offer": {
			"post": {
				"operationId": "AcceptOffer",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CredentialExchangeRecord"
								},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"state": "offer-sent",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b"
											},
											"metadata": {
												"_internal/indyCredential": {
													"credentialDefinitionId": "q7ATwTYbQDgiigVijUAej:3:CL:318187:latest",
													"schemaId": "q7ATwTYbQDgiigVijUAej:2:Employee Badge:1.0"
												}
											},
											"credentials": [],
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a credential offer as holder by sending an accept offer message\nto the connection associated with the credential exchange record.",
				"tags": [
					"DIDComm - Credentials"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CredentialOfferOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/credentials/accept-request": {
			"post": {
				"operationId": "AcceptRequest",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CredentialExchangeRecord"
								},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"state": "offer-sent",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b"
											},
											"metadata": {
												"_internal/indyCredential": {
													"credentialDefinitionId": "q7ATwTYbQDgiigVijUAej:3:CL:318187:latest",
													"schemaId": "q7ATwTYbQDgiigVijUAej:2:Employee Badge:1.0"
												}
											},
											"credentials": [],
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a credential request as issuer by sending an accept request message\nto the connection associated with the credential exchange record.",
				"tags": [
					"DIDComm - Credentials"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptCredentialRequestOptions"
							}
						}
					}
				}
			}
		},
		"/didcomm/credentials/accept-credential": {
			"post": {
				"operationId": "AcceptCredential",
				"responses": {
					"200": {
						"description": "CredentialExchangeRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CredentialExchangeRecord"
								},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"state": "offer-sent",
												"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
												"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b"
											},
											"metadata": {
												"_internal/indyCredential": {
													"credentialDefinitionId": "q7ATwTYbQDgiigVijUAej:3:CL:318187:latest",
													"schemaId": "q7ATwTYbQDgiigVijUAej:2:Employee Badge:1.0"
												}
											},
											"credentials": [],
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"connectionId": "ac6d0fdd-0db8-4f52-8a3d-de7ff8ddc14b",
											"threadId": "82701488-b43c-4d7b-9244-4bb204a7ae26",
											"credentialAttributes": [],
											"protocolVersion": "v1"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a credential as holder by sending an accept credential message\nto the connection associated with the credential exchange record.",
				"tags": [
					"DIDComm - Credentials"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AcceptCredential"
							}
						}
					}
				}
			}
		},
		"/didcomm/credentials/{credentialRecordId}/form-data": {
			"get": {
				"operationId": "CredentialFormData",
				"responses": {
					"200": {
						"description": "credentialRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetCredentialFormatDataReturn__40_LegacyIndyCredentialFormat-or-JsonLdCredentialFormat-or-AnonCredsCredentialFormat_41_-Array_"
								}
							}
						}
					}
				},
				"description": "Return credentialRecord",
				"tags": [
					"DIDComm - Credentials"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "credentialRecordId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/didcomm/connections": {
			"get": {
				"operationId": "GetAllConnections",
				"responses": {
					"200": {
						"description": "ConnectionRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Record_string.unknown_"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": [
											{
												"_tags": {
													"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
													"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
													"invitationKey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz",
													"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d",
													"verkey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz"
												},
												"metadata": {},
												"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
												"createdAt": "2022-01-01T00:00:00.000Z",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
											}
										]
									}
								}
							}
						}
					}
				},
				"description": "Retrieve all connections records",
				"tags": [
					"DIDComm - Connections"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "outOfBandId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Alias",
						"in": "query",
						"name": "alias",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Connection state",
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/DidExchangeState"
						}
					},
					{
						"description": "My DID",
						"in": "query",
						"name": "myDid",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Their DID",
						"in": "query",
						"name": "theirDid",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Their label",
						"in": "query",
						"name": "theirLabel",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/didcomm/connections/{connectionId}": {
			"get": {
				"operationId": "GetConnectionById",
				"responses": {
					"200": {
						"description": "ConnectionRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Record_string.unknown_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"invitationKey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d",
												"verkey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz"
											},
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
											"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
											"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieve connection record by connection id",
				"tags": [
					"DIDComm - Connections"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteConnection",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Deletes a connection record from the connection repository.",
				"tags": [
					"DIDComm - Connections"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/didcomm/connections/{connectionId}/accept-request": {
			"post": {
				"operationId": "AcceptRequest",
				"responses": {
					"200": {
						"description": "ConnectionRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Record_string.unknown_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"invitationKey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d",
												"verkey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz"
											},
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
											"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
											"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a connection request as inviter by sending a connection response message\nfor the connection with the specified connection id.\n\nThis is not needed when auto accepting of connection is enabled.",
				"tags": [
					"DIDComm - Connections"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/didcomm/connections/{connectionId}/accept-response": {
			"post": {
				"operationId": "AcceptResponse",
				"responses": {
					"200": {
						"description": "ConnectionRecord",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Record_string.unknown_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
												"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
												"invitationKey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz",
												"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d",
												"verkey": "9HG4rJFpLiWf56MWxHj9rgdpErFzim2zEpHuxy1dw7oz"
											},
											"metadata": {},
											"id": "821f9b26-ad04-4f56-89b6-e2ef9c72b36e",
											"createdAt": "2022-01-01T00:00:00.000Z",
											"did": "did:peer:1zQmfQh1T3rSqarP2FZ37uKjdQHPKFdVyo2mGiAPHZ8Ep7hv",
											"invitationDid": "did:peer:2.SeyJzIjoiaHR0cHM6Ly9kYTIzLTg5LTIwLTE2Mi0xNDYubmdyb2suaW8iLCJ0IjoiZGlkLWNvbW11bmljYXRpb24iLCJwcmlvcml0eSI6MCwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtualg3U1lXRmdHMThCYkNEZHJnemhuQnA0UlhyOGVITHZxQ3FvRXllckxiTiN6Nk1rbmpYN1NZV0ZnRzE4QmJDRGRyZ3pobkJwNFJYcjhlSEx2cUNxb0V5ZXJMYk4iXSwiciI6W119",
											"outOfBandId": "edbc89fe-785f-4774-a288-46012486881d"
										}
									}
								}
							}
						}
					}
				},
				"description": "Accept a connection response as invitee by sending a trust ping message\nfor the connection with the specified connection id.\n\nThis is not needed when auto accepting of connection is enabled.",
				"tags": [
					"DIDComm - Connections"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			}
		},
		"/didcomm/url/{invitationId}": {
			"get": {
				"operationId": "GetInvitation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/ConnectionRecord"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"DIDComm - Connections"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "invitationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/didcomm/basic-messages/{connectionId}": {
			"get": {
				"operationId": "GetBasicMessages",
				"responses": {
					"200": {
						"description": "BasicMessageRecord[]",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/BasicMessageRecord"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": [
											{
												"_tags": {
													"role": "sender",
													"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834"
												},
												"metadata": {},
												"id": "74bcf865-1fdc-45b4-b517-9def02dfd25f",
												"createdAt": "2022-08-18T08:38:40.216Z",
												"content": "string",
												"sentTime": "2022-08-18T08:38:40.216Z",
												"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834"
											}
										]
									}
								}
							}
						}
					}
				},
				"description": "Retrieve basic messages by connection id",
				"tags": [
					"DIDComm - Basic Messages"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				]
			},
			"post": {
				"operationId": "SendMessage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BasicMessageRecord"
								},
								"examples": {
									"Example 1": {
										"value": {
											"_tags": {
												"role": "sender",
												"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834"
											},
											"metadata": {},
											"id": "74bcf865-1fdc-45b4-b517-9def02dfd25f",
											"createdAt": "2022-08-18T08:38:40.216Z",
											"content": "string",
											"sentTime": "2022-08-18T08:38:40.216Z",
											"connectionId": "2aecf74c-3073-4f98-9acb-92415d096834"
										}
									}
								}
							}
						}
					}
				},
				"description": "Send a basic message to a connection",
				"tags": [
					"DIDComm - Basic Messages"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"description": "Connection identifier",
						"in": "path",
						"name": "connectionId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RecordId"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Record_content.string_"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/create-tenant": {
			"post": {
				"operationId": "CreateTenant",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"token": {},
										"metadata": {
											"$ref": "#/components/schemas/Metadata____"
										},
										"updatedAt": {
											"type": "string",
											"format": "date-time"
										},
										"createdAt": {
											"type": "string",
											"format": "date-time"
										},
										"id": {
											"type": "string"
										},
										"storageVersion": {
											"type": "string"
										},
										"config": {
											"$ref": "#/components/schemas/TenantConfig"
										},
										"type": {
											"type": "string",
											"enum": [
												"TenantRecord"
											],
											"nullable": false
										}
									},
									"required": [
										"token",
										"metadata",
										"createdAt",
										"id",
										"storageVersion",
										"config",
										"type"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"jwt": [
							"Basewallet"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTenantOptions"
							}
						}
					}
				}
			}
		},
		"/multi-tenancy/get-token/{tenantId}": {
			"post": {
				"operationId": "GetTenantToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"jwt": [
							"Basewallet"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/multi-tenancy/{tenantId}": {
			"get": {
				"operationId": "GetTenantById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"jwt": [
							"Basewallet"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteTenantById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"reason": {
											"type": "string"
										}
									},
									"required": [
										"reason"
									],
									"type": "object"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"MultiTenancy"
				],
				"security": [
					{
						"jwt": [
							"Basewallet"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tenantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/openid4vc/issuance-sessions/create-credential-offer": {
			"post": {
				"operationId": "CreateCredentialOffer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"issuanceSession": {
											"$ref": "#/components/schemas/OpenId4VcIssuanceSessionRecord"
										},
										"credentialOffer": {
											"type": "string"
										}
									},
									"required": [
										"issuanceSession",
										"credentialOffer"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Creates a credential offer with the specified credential configurations and authorization type.",
				"tags": [
					"oid4vc issuance sessions"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OpenId4VcIssuanceSessionsCreateOffer"
							}
						}
					}
				}
			}
		},
		"/openid4vc/issuance-sessions/{issuanceSessionId}": {
			"get": {
				"operationId": "GetIssuanceSessionsById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenId4VcIssuanceSessionRecord"
								}
							}
						}
					}
				},
				"description": "Get issuance details by issuance SessionId",
				"tags": [
					"oid4vc issuance sessions"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "issuanceSessionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateSessionById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenId4VcIssuanceSessionRecord"
								}
							}
						}
					}
				},
				"description": "Update issuance session metadata by session ID",
				"tags": [
					"oid4vc issuance sessions"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "issuanceSessionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Record_string.unknown_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteIssuanceSessionById",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Delete issuance session by session ID",
				"tags": [
					"oid4vc issuance sessions"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "issuanceSessionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/openid4vc/issuance-sessions": {
			"get": {
				"operationId": "GetIssuanceSessionsByQuery",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/OpenId4VcIssuanceSessionRecord"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Fetch all issuance sessions by query",
				"tags": [
					"oid4vc issuance sessions"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "cNonce",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "publicIssuerId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "preAuthorizedCode",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/OpenId4VcIssuanceSessionState"
						}
					},
					{
						"in": "query",
						"name": "credentialOfferUri",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "authorizationCode",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/openid4vc/holder/sd-jwt-vcs": {
			"get": {
				"operationId": "GetSdJwtCredentials",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SdJwtVcRecord"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get SdJwt type of credentials",
				"tags": [
					"oid4vc holders"
				],
				"security": [],
				"parameters": []
			}
		},
		"/openid4vc/holder/mdoc-vcs": {
			"get": {
				"operationId": "GetMdocCredentials",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/MdocRecord"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Fetch all mso mdoc credentials in wallet",
				"tags": [
					"oid4vc holders"
				],
				"security": [],
				"parameters": []
			}
		},
		"/openid4vc/holder/mdoc-vcs/decode": {
			"post": {
				"operationId": "DecodeMdocCredential",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Decode mso mdoc credential in wallet",
				"tags": [
					"oid4vc holders"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"base64Url": {
										"type": "string"
									}
								},
								"required": [
									"base64Url"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/openid4vc/holder/authorization-request": {
			"post": {
				"operationId": "RequestAuthorizationForCredential",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"codeVerifier": {
											"type": "string"
										},
										"authorizationRequestUrl": {
											"type": "string"
										},
										"actionToTake": {
											"type": "string"
										}
									},
									"required": [
										"codeVerifier",
										"authorizationRequestUrl",
										"actionToTake"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Resolve a credential offer",
				"tags": [
					"oid4vc holders"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuthorizeRequestCredentialOffer"
							}
						}
					}
				}
			}
		},
		"/openid4vc/holder/request-credential": {
			"post": {
				"operationId": "RequestCredential",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Initiates a token request, then requests credentials from issuer",
				"tags": [
					"oid4vc holders"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RequestCredentialBody"
							}
						}
					}
				}
			}
		},
		"/openid4vc/holder/resolve-proof-request": {
			"post": {
				"operationId": "ResolveProofRequest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Resolve a proof request",
				"tags": [
					"oid4vc holders"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ResolveProofRequest"
							}
						}
					}
				}
			}
		},
		"/openid4vc/holder/accept-proof-request": {
			"post": {
				"operationId": "AcceptProofRequest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Accept a proof request",
				"tags": [
					"oid4vc holders"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ResolveProofRequest"
							}
						}
					}
				}
			}
		},
		"/openid4vc/holder/decode-sdjwt": {
			"post": {
				"operationId": "DecodeSdJwt",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"tags": [
					"oid4vc holders"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"jwt": {
										"type": "string"
									}
								},
								"required": [
									"jwt"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/openid4vc/issuer": {
			"post": {
				"operationId": "CreateIssuer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenId4VcIssuerRecord"
								},
								"examples": {
									"Example 1": {
										"value": {
											"issuerId": "abc-gov",
											"accessTokenSignerKeyType": "ed25519",
											"display": [
												{
													"name": "ABC Gov",
													"locale": "en",
													"logo": {
														"uri": "https://upload.wikimedia.org/wikipedia/commons/2/2f/ABC-2021-LOGO.svg",
														"alt_text": "abc_logo"
													}
												}
											],
											"dpopSigningAlgValuesSupported": [
												"RS256",
												"ES256"
											],
											"credentialConfigurationsSupported": {
												"VaccinationCredential-sdjwt": {
													"format": "vc+sd-jwt",
													"vct": "VaccinationCredential",
													"scope": "openid4vc:credential:VaccinationCredential-sdjwt",
													"claims": {
														"name": {
															"mandatory": true,
															"value_type": "string",
															"display": {
																"name": "Full Name",
																"locale": "en"
															}
														},
														"vaccine": {
															"mandatory": true,
															"value_type": "string",
															"display": {
																"name": "Vaccine Type",
																"locale": "en"
															}
														},
														"lotNumber": {
															"value_type": "string",
															"display": {
																"name": "Batch Number",
																"locale": "en"
															}
														},
														"performer": {
															"value_type": "string",
															"display": {
																"name": "Healthcare Provider",
																"locale": "en"
															}
														},
														"doseDate": {
															"value_type": "date",
															"display": {
																"name": "Date of Dose",
																"locale": "en"
															}
														}
													},
													"credential_signing_alg_values_supported": [
														"ES256"
													],
													"cryptographic_binding_methods_supported": [
														"did:key"
													],
													"display": [
														{
															"name": "COVID-19 Vaccination Certificate",
															"description": "Proof of vaccination against COVID-19",
															"locale": "en"
														}
													]
												},
												"NationalIDCredential-mdoc": {
													"format": "mso_mdoc",
													"doctype": "org.iso.18013.5.1",
													"scope": "openid4vc:credential:NationalIDCredential-mdoc",
													"claims": {
														"family_name": {
															"mandatory": true,
															"value_type": "string",
															"display": {
																"name": "Last Name",
																"locale": "en"
															}
														},
														"given_name": {
															"mandatory": true,
															"value_type": "string",
															"display": {
																"name": "First Name",
																"locale": "en"
															}
														},
														"birth_date": {
															"value_type": "date",
															"display": {
																"name": "Date of Birth",
																"locale": "en"
															}
														},
														"gender": {
															"value_type": "string",
															"display": {
																"name": "Gender",
																"locale": "en"
															}
														},
														"nationality": {
															"value_type": "string",
															"display": {
																"name": "Nationality",
																"locale": "en"
															}
														},
														"document_number": {
															"mandatory": true,
															"value_type": "string",
															"display": {
																"name": "Document Number",
																"locale": "en"
															}
														},
														"issuing_authority": {
															"value_type": "string",
															"display": {
																"name": "Issuing Authority",
																"locale": "en"
															}
														},
														"expiry_date": {
															"value_type": "date",
															"display": {
																"name": "Expiry Date",
																"locale": "en"
															}
														}
													},
													"credential_signing_alg_values_supported": [
														"ES256"
													],
													"cryptographic_binding_methods_supported": [
														"did:key"
													],
													"display": [
														{
															"name": "National ID",
															"description": "Digital government-issued identity credential",
															"locale": "en"
														}
													]
												},
												"UniversityDegreeCredential-sdjwt": {
													"format": "vc+sd-jwt",
													"vct": "UniversityDegreeCredential",
													"scope": "openid4vc:credential:UniversityDegreeCredential-sdjwt",
													"claims": {
														"full_name": {
															"mandatory": true,
															"value_type": "string",
															"display": {
																"name": "Full Name",
																"locale": "en"
															}
														},
														"diploma_name": {
															"mandatory": true,
															"value_type": "string",
															"display": {
																"name": "Degree Title",
																"locale": "en"
															}
														},
														"college_name": {
															"value_type": "string",
															"display": {
																"name": "College/University",
																"locale": "en"
															}
														},
														"graduation_date": {
															"value_type": "date",
															"display": {
																"name": "Graduation Date",
																"locale": "en"
															}
														},
														"awarded_date": {
															"value_type": "date",
															"display": {
																"name": "Award Date",
																"locale": "en"
															}
														}
													},
													"credential_signing_alg_values_supported": [
														"ES256",
														"EdDSA"
													],
													"cryptographic_binding_methods_supported": [
														"did:key"
													],
													"display": [
														{
															"name": "University Degree Credential",
															"description": "Issued by a recognized educational institution",
															"locale": "en"
														}
													]
												},
												"DrivingLicenseCredential-mdoc": {
													"format": "mso_mdoc",
													"doctype": "org.iso.18013.5.1",
													"scope": "openid4vc:credential:DrivingLicenseCredential-mdoc",
													"claims": {
														"family_name": {
															"mandatory": true,
															"value_type": "string",
															"display": {
																"name": "Surname",
																"locale": "en"
															}
														},
														"given_name": {
															"mandatory": true,
															"value_type": "string",
															"display": {
																"name": "Given Name",
																"locale": "en"
															}
														},
														"birth_date": {
															"value_type": "date",
															"display": {
																"name": "Date of Birth",
																"locale": "en"
															}
														},
														"issue_date": {
															"value_type": "date",
															"display": {
																"name": "Issued On",
																"locale": "en"
															}
														},
														"expiry_date": {
															"value_type": "date",
															"display": {
																"name": "Expires On",
																"locale": "en"
															}
														},
														"issuing_country": {
															"value_type": "string",
															"display": {
																"name": "Issuing Country",
																"locale": "en"
															}
														},
														"license_number": {
															"value_type": "string",
															"display": {
																"name": "License Number",
																"locale": "en"
															}
														},
														"categories_of_vehicles": {
															"value_type": "string",
															"display": {
																"name": "Authorized Vehicle Types",
																"locale": "en"
															}
														}
													},
													"credential_signing_alg_values_supported": [
														"ES256"
													],
													"cryptographic_binding_methods_supported": [
														"did:key"
													],
													"display": [
														{
															"name": "Driving License",
															"description": "ISO-compliant mobile driving license",
															"locale": "en"
														}
													]
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Creates an issuer with issuer metadata.",
				"tags": [
					"oid4vc issuers"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateIssuerOptions"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetIssuersByQuery",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/OpenId4VcIssuerRecord"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Query issuers by optional publicIssuerId.",
				"tags": [
					"oid4vc issuers"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "publicIssuerId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/openid4vc/issuer/{publicIssuerId}": {
			"put": {
				"operationId": "UpdateIssuerMetadata",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenId4VcIssuerRecord"
								}
							}
						}
					}
				},
				"description": "Updates issuer metadata for a given publicIssuerId.",
				"tags": [
					"oid4vc issuers"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "publicIssuerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateIssuerRecordOptions"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetIssuer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenId4VcIssuerRecord"
								}
							}
						}
					}
				},
				"description": "Returns a specific issuer by publicIssuerId.",
				"tags": [
					"oid4vc issuers"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "publicIssuerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/openid4vc/issuer/{issuerId}/metadata": {
			"get": {
				"operationId": "GetIssuerAgentMetaData",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"description": "Returns metadata for a specific issuer.",
				"tags": [
					"oid4vc issuers"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "issuerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/openid4vc/issuer/{id}": {
			"delete": {
				"operationId": "DeleteIssuer",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Deletes a specific issuer by record id.",
				"tags": [
					"oid4vc issuers"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/openid4vc/verification-sessions/create-presentation-request": {
			"post": {
				"operationId": "CreateProofRequest",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenId4VpCreateAuthorizationRequestReturn"
								}
							}
						}
					}
				},
				"description": "Create an authorization request, acting as a Relying Party (RP)",
				"tags": [
					"oid4vc verification sessions"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateAuthorizationRequest"
							}
						}
					}
				}
			}
		},
		"/openid4vc/verification-sessions": {
			"get": {
				"operationId": "GetAllVerificationSessions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/OpenId4VcVerificationSessionRecord"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieve all verification session records",
				"tags": [
					"oid4vc verification sessions"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "publicVerifierId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "payloadState",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/OpenId4VcVerificationSessionState"
						}
					},
					{
						"in": "query",
						"name": "authorizationRequestUri",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "nonce",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/openid4vc/verification-sessions/{verificationSessionId}": {
			"get": {
				"operationId": "GetVerificationSessionsById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenId4VcVerificationSessionRecord"
								}
							}
						}
					}
				},
				"description": "Get verification session by ID",
				"tags": [
					"oid4vc verification sessions"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "verificationSessionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/openid4vc/verifier": {
			"post": {
				"operationId": "CreateVerifier",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenId4VcVerifierRecord"
								}
							}
						}
					}
				},
				"description": "Create a new verifier and store the verifier record",
				"tags": [
					"oid4vc verifiers"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OpenId4VcSiopCreateVerifierOptions"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetVerifiersByQuery",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/OpenId4VcVerifierRecord"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get verifiers by query",
				"tags": [
					"oid4vc verifiers"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "publicVerifierId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/openid4vc/verifier/{publicVerifierId}": {
			"put": {
				"operationId": "UpdateVerifierMetadata",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenId4VcVerifierRecord"
								}
							}
						}
					}
				},
				"description": "Update verifier metadata",
				"tags": [
					"oid4vc verifiers"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "publicVerifierId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OpenId4VcUpdateVerifierRecordOptions"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetVerifier",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenId4VcVerifierRecord"
								}
							}
						}
					}
				},
				"description": "Get single verifier by ID",
				"tags": [
					"oid4vc verifiers"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "publicVerifierId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/openid4vc/verifier/{verifierId}": {
			"delete": {
				"operationId": "DeleteVerifier",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Delete verifier by ID",
				"tags": [
					"oid4vc verifiers"
				],
				"security": [
					{
						"jwt": [
							"tenant",
							"dedicated"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "verifierId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}